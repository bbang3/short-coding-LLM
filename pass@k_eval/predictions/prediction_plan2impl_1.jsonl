{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    stack = []\n    current_string = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            stack.pop()\n        if not stack:\n            result.append(current_string)\n            current_string = \"\"\n        else:\n            current_string += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return abs(number - int(number))"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers, delimeter):\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    return result[:-1]  # remove last delimeter"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Step 1: Split the input string into groups based on spaces\n    groups = paren_string.split(\" \")\n\n    # Step 2: Initialize a list to store the maximum nesting level for each group\n    max_nesting_levels = []\n\n    # Step 3: Iterate over each group and calculate its maximum nesting level\n    for group in groups:\n        # Step 3a: Initialize a variable to keep track of the current nesting level\n        current_level = 0\n\n        # Step 3b: Iterate over each character in the group and update the nesting level accordingly\n        for char in group:\n            if char == \"(\":\n                current_level += 1\n            elif char == \")\":"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings, substring):\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers):\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = -float('inf')\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string):\n    # Find the longest postfix that is a palindrome\n    for i in range(len(string), 0, -1):\n        if string[i:] == string[i:][::-1]:\n            break\n    else:\n        return string\n\n    # Append the reverse of the prefix to the end of the string\n    return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a, b):\n    return bin(int(a, 2) ^ int(b, 2))[2:]"}
{"task_id": "HumanEval/12", "completion": "def longest(strings):\n    if not strings:\n        return None\n    longest_string = \"\"\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    gcd = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            gcd = i\n    return gcd"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string):\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n):\n    \"\"\"Return a string containing space-delimited numbers starting from 0 upto n inclusive.\"\"\"\n    output = \"\"\n    for i in range(n+1):\n        output += str(i) + \" \"\n    return output.strip()"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, '|': 2, '.|': 1}\n    notes = music_string.split()\n    return [note_map[note] for note in notes]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i] == substring[0]:\n            if string[i:].startswith(substring):\n                count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    number_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    number_list = numbers.split()\n    sorted_numbers = sorted(number_list, key=lambda x: number_map[x])\n    return \" \".join(sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    Find the closest elements in a list of numbers and return them in order.\n\n    Args:\n        numbers (List[float]): A list of numbers.\n\n    Returns:\n        Tuple[float, float]: The two closest elements in the list in order.\n    \"\"\"\n    # Sort the list\n    sorted_numbers = sorted(numbers)\n\n    # Initialize variables to keep track of the closest elements and their difference\n    closest_elements = (sorted_numbers[0], sorted_numbers[1])\n    min_diff = abs(closest_elements[0] - closest_elements[1])\n\n    # Iterate over the list and find the closest elements\n    for i in range(len(sorted_numbers) - 1):\n        current_diff = abs(sorted_numbers[i] - sorted_numbers[i + 1])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_elements = (sorted_numbers[i], sorted_numbers[i + 1])\n\n    return closest_elements"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Step 1: Find the smallest and largest number in the list\n    smallest = min(numbers)\n    largest = max(numbers)\n\n    # Step 2: Calculate the range of the numbers (largest - smallest)\n    range = largest - smallest\n\n    # Step 3: Create a new list to store the rescaled numbers\n    rescaled_numbers = []\n\n    # Step 4: Iterate through the original list and apply the linear transform\n    for number in numbers:\n        # Calculate the rescaled value using the linear formula: (number - smallest) / range\n        rescaled_value = (number - smallest) / range\n        rescaled_numbers.append(rescaled_"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values):\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n):\n    largest = 1\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            largest = i\n    return largest"}
{"task_id": "HumanEval/25", "completion": "def factorize(n):\n    if n <= 1:\n        return []\n    prime_factors = []\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            prime_factors.append(i)"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_elements = set()\n    unique_list = []\n    for num in numbers:\n        if num not in unique_elements:\n            unique_list.append(num)\n            unique_elements.add(num)\n    return unique_list"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string):\n    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char.upper()\n    return flipped_string"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = \"\"\n    for s in strings:\n        result += s\n    return result"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef find_zero(xs):\n    # Check if xs has an even number of elements\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The input list must have an even number of elements.\")\n    \n    # Find the largest non-zero coefficient in xs\n    max_coeff = max([abs(x) for x in xs])\n    if max_coeff == 0:\n        raise ValueError(\"The input list must have a non-zero coefficient.\")\n    \n    # Use Newton-Raphson method to find a zero of the polynomial defined by xs\n    x = 0\n    while True:\n        fx = poly(xs, x)\n        if abs"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    # Create a copy of the original list\n    l_copy = l.copy()\n    # Get the length of the list\n    n = len(l)\n    # Iterate over the indicies that are divisible by three\n    for i in range(0, n, 3):\n        # Sort the values at the current index and the next two indices\n        l_copy[i:i+3] = sorted(l_copy[i:i+3])\n    return l_copy"}
{"task_id": "HumanEval/34", "completion": "def unique(my_list):\n    return sorted(set(my_list))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l):\n    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    # Create a new list to store the sorted even indices\n    l_sorted = []\n    # Iterate over the indicies of the input list\n    for i in range(len(l)):\n        # If the index is even, add the value at that index to the sorted list\n        if i % 2 == 0:\n            l_sorted.append(l[i])\n    # Sort the sorted list\n    l_sorted.sort()\n    # Iterate over the indicies of the input list again\n    for i in range(len(l)):\n        # If the index is even, replace the value at that index with the corresponding value from the sorted list\n        if i % 2 == 0:\n            l[i] = l_sorted[i // 2]\n    # Return the modified input list\n    return l"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s):\n    # Split the input string into groups of three characters each\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    \n    # For each group, move the last character to the front and shift the remaining characters one position to the right\n    decoded_groups = []\n    for group in groups:\n        if len(group) == 3:\n            decoded_groups.append(group[2:] + group[0])\n        else:\n            decoded_groups.append(group)\n    \n    # Join all the groups back together to form the decoded string\n    return \"\".join(decoded_groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    fib = [0, 1]\n    while len(fib) <= n:\n        fib.append(fib[-1] + fib[-2])\n    for i in range(len(fib)):\n        if is_prime(fib[i]):"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    # Check if the list has at least three elements\n    if len(l) < 3:\n        return False\n\n    # Sort the list\n    l.sort()\n\n    # Loop through the list and check for three elements that sum to zero\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    # Initialize a counter for the number of collisions\n    collision_count = 0\n\n    # Iterate over each pair of cars moving in opposite directions\n    for i in range(n):\n        for j in range(n):\n            # Check if the two cars are on opposite sides of the road\n            if i + j == n - 1:\n                collision_count += 1\n\n    return collision_count"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x, base):\n    x_str = str(x)\n    digits = []\n    for digit in x_str:\n        digits.append(str(int(digit) % base))\n    return ''.join(digits)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    s = (a + h) / 2\n    A = sqrt(s * (s - a) * (s - h))\n    return A"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 3:\n        return 0\n    elif n == 4:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    if not l:\n        return None\n    sorted_list = sorted(l)\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[len(sorted_list) // 2 - 1] + sorted_list[len(sorted_list) // 2]) / 2\n    else:\n        return sorted_list[len(sorted_list) // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text):\n    if not text:\n        return True\n    reversed_text = text[::-1]\n    return text == reversed_text"}
{"task_id": "HumanEval/49", "completion": "def modp(n, p):\n    if n < 0:\n        n = -n\n        while n > 0:\n            result = (result * result) % p\n            n -= 1\n        return result\n    else:\n        return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = set('aeiou')  # define a set of vowels to remove\n    output = ''             # initialize an empty output string\n    for char in text:      # loop through each character in the input string\n        if char not in vowels:  # check if the current character is not a vowel\n            output += char   # add it to the output string\n    return output           # return the modified output string without any vowels"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(word1, word2):\n    return sorted(word1) == sorted(word2)"}
{"task_id": "HumanEval/55", "completion": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    if len(l) <= 1:\n        return True\n    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] >= l[i-1]:\n            increasing = False\n        if l[i] <= l[i-1]:\n            decreasing = False\n    return not (increasing or decreasing)"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    # Define a new list to store the common elements\n    common_elements = []\n\n    # Use a set to get the unique elements from both lists\n    unique_elements = set(l1).intersection(set(l2))\n\n    # Sort the resulting list of common elements\n    sorted_common_elements = sorted(unique_elements)\n\n    # Return the sorted list of common elements\n    return sorted_common_elements"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    if is_prime(n):\n        return n\n    largest_factor = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            largest_factor = max(largest_factor, i)\n    return largest_factor"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0 or stack[-1] != \"(\":\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    pass"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    fibfib_list = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n    return fibfib_list[-1]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(word):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x = str(x)\n    length = len(x)\n    if shift > length:\n        return x[::-1]\n    else:\n        return x[shift:] + x[:shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    result = 0\n    for c in s:\n        if c.isupper():\n            result += ord(c)\n    return result"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Convert the string to a list of integers\n    s = [int(x) for x in s.split()]\n    # Calculate the number of mango fruits\n    m = n - sum(s)\n    return m"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    # Check if the input array is empty\n    if not arr:\n        return []\n\n    # Initialize variables for the smallest even value and its index\n    smallest_even = None\n    smallest_index = None\n\n    # Iterate over the input array\n    for i, value in enumerate(arr):\n        # Check if the current value is even\n        if value % 2 == 0:\n            # If the current value is even, check if it's smaller than the previous smallest even value\n            if smallest_even is None or value < smallest_even:\n                # If the current value is smaller, update the smallest even value and its index\n                smallest_even = value\n                smallest_index = i\n\n    # Return the smallest even value and its index, or an empty list if no even values were found\n    return [smallest_even, smallest_index] if smallest_even is not None else []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for i in lst:\n        if i not in freq:\n            freq[i] = 0\n        freq[i] += 1\n    max_val = -1\n    for key, val in freq.items():\n        if val >= key and val > max_val:\n            max_val = val\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    # Sort the input list using the built-in sorted function\n    sorted_lst = sorted(lst)\n\n    # Create a new empty list to store the sorted elements in the desired order\n    result = []\n\n    # Iterate over the sorted list and append the minimum value to the new list\n    while len(sorted_lst) > 0:\n        min_value = min(sorted_lst)\n        result.append(min_value)\n        sorted_lst.remove(min_value)\n\n    # Return the new list with the sorted elements in the desired order\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    semi_perimeter = (a + b + c) / 2\n    area = round(sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c)), 2)\n    return area"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if q is a palindromic list\n    if q == q[::-1]:\n        # Check if the sum of elements in q is less than or equal to w\n        if sum(q) <= w:\n            return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    if len(arr) <= 1:\n        return 0\n    \n    mid = len(arr) // 2\n    first_half = arr[:mid]\n    second_half = arr[mid:]\n    \n    # Check if the first half is a palindrome\n    if not is_palindrome(first_half):"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total1 = 0\n    total2 = 0\n    for s in lst1:\n        total1 += len(s)\n    for s in lst2:\n        total2 += len(s)\n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a <= 1 or a >= 100:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0 and is_prime(i) and is_prime(a//i):\n            return True\n    return False\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n ** int(n)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0 or a == 1:\n        return True\n    cube_root = math.pow(a, 1/3)\n    if cube_root**3 == a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_digits = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for char in num:\n        if char in \"0123456789\":\n            decimal_value = int(char)\n        else:\n            decimal_value = ord(char) - ord(\"A\") + 10\n        if decimal_value in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    # Convert the input decimal number to a binary string\n    binary = bin(decimal)\n\n    # Remove the extra characters '0b' from the beginning and end of the binary string\n    binary = binary[2:]\n\n    # Add the extra characters 'db' at the beginning and end of the binary string\n    binary = \"db\" + binary + \"db\"\n\n    return binary"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    seen = set()\n    for i in range(0, len(s), 3):\n        chunk = s[i:i+3]\n        if any(letter in seen for letter in chunk):\n            return False\n        seen.update(chunk)\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grade_map = {4.0: \"A+\", 3.7: \"A\", 3.3: \"A-\", 3.0: \"B+\", 2.7: \"B\", 2.3: \"B-\", 2.0: \"C+\", 1.7: \"C\", 1.3: \"C-\", 1.0: \"D+\", 0.7: \"D\", 0.0: \"D-\", 0.0: \"E\"}\n    return [grade_map[grade] for grade in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n    return len(string) in prime_numbers"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # Convert the input integer to a binary string\n    binary_string = bin(N)[2:]\n    \n    # Initialize the total sum variable\n    total_sum = 0\n    \n    # Iterate through each digit in the binary string\n    for digit in binary_string:\n        # Convert the current digit to an integer and add it to the total sum\n        total_sum += int(digit)\n    \n    # Return the total sum as a binary string\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    # Create a copy of the given array\n    arr = array[:]\n    # Calculate the sum of the first and last index values\n    sum = arr[0] + arr[-1]\n    # Check if the sum is odd or even\n    if sum % 2 == 1:\n        # Sort the array in ascending order\n        arr.sort()\n    else:\n        # Sort the array in descending order\n        arr.sort(reverse=True)\n    return arr"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    # Define a dictionary to map letters to their encrypted values\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_alphabet = 'cdefghijklmnopqrstuvwxyzab'\n    letter_map = {letter: encrypted_alphabet[i] for i, letter in enumerate(alphabet)}\n    \n    # Encrypt the input string\n    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            encrypted_string += letter_map[char]\n        else:\n            encrypted_string += char\n    \n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    sorted_list = sorted(lst)\n    smallest_index = sorted_list.index(min(sorted_list))\n    if smallest_index < len(sorted_list) - 1:\n        return sorted_list[smallest_index + 1]\n    else:\n        return None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    # Step 1: Split the input string into sentences using '.', '?' or '!' as delimiters.\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    \n    # Step 2: Loop through each sentence and check if it starts with \"I\".\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            boredom_count += 1\n    \n    # Step 3: Return the number of boredoms found.\n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    sum = x + y\n    if z == sum:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    # Create a dictionary to map vowels to their replacement letters\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'm', 'u': 'q'}\n    # Initialize an empty string to store the encoded message\n    encoded_message = ''\n    # Iterate through each letter in the message\n    for letter in message:\n        # If the letter is a vowel, replace it with its corresponding replacement letter\n        if letter.lower() in vowel_map:\n            encoded_message += vowel_map[letter.lower()].upper()\n        # Otherwise, swap the case of the letter and add it to the encoded message\n        else:\n            encoded_message += letter.swapcase()\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    # Step 1: Create a function to find the largest prime number in the list\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n\n    # Step 2: Sum the digits of the largest prime number\n    if largest_prime is not None:\n        return sum(int(digit) for digit in str(largest_prime))\n    else:\n        return 0"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    first_key = list(dictionary.keys())[0]\n    if not isinstance(first_key, str):\n        return False\n    lower_case_first_key = first_key.lower()\n    for key in dictionary.keys():\n        if not isinstance(key, str) or key.lower() != lower_case_first_key:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    prime_numbers = []\n    for i in range(2, n+1):\n        if is_prime(i"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i, c in enumerate(s):\n        if c.isupper() and i % 2 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    float_value = float(value)\n    rounded_value = round(float_value)\n    if rounded_value != float_value:\n        rounded_value += 0.5\n    return int(rounded_value)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    result = []\n    while n > 0:\n        result.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (n + 1) // 2\n    return result[::-1]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = []\n    for word in s.split(\", \"):\n        words.append(word)\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= 0 or y <= 0:\n        return -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    average = round(total / (m-n+1))\n    binary = bin(average)[2:]\n    return binary"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    # Step 1: Create an empty list to store the unique digits\n    unique_list = []\n    \n    # Step 2: Iterate through each element in the input list\n    for num in x:\n        # Step 3: Check if the current number has any even digits\n        if not any(int(digit) % 2 == 0 for digit in str(num)):\n            # Step 4: If the current number has no even digits, add it to the unique list\n            unique_list.append(num)\n    \n    # Step 5: Return the sorted unique list\n    return sorted(unique_list)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Step 1: Sort the array in ascending order\n    arr.sort()\n    # Step 2: Reverse the sorted array\n    arr.reverse()\n    # Step 3: Replace each digit with its corresponding name\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            arr[i] = \"One\"\n        elif arr[i] == 2:\n            arr[i] = \"Two\"\n        elif arr[i] == 3:\n            arr[i] = \"Three\"\n        elif arr[i] == 4:\n            arr[i] = \"Four\"\n        elif arr[i] == 5:\n            arr[i] = \"Five\"\n        elif arr[i] == 6:\n            arr[i] = \"Six\"\n        elif arr[i] == 7:\n            arr[i] = \"Seven\"\n        elif arr[i] == 8:\n            arr[i] = \"Eight\"\n        elif arr[i] == 9:\n            arr[i] = \"Nine\"\n    return arr"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    if n < 0:\n        raise ValueError(\"Invalid input parameter n\")\n    results = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            results.append(factorial)\n        else"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_of_digits = 0\n        for digit in str(abs(num)):\n            sum_of_digits += int(digit)\n        if sum_of_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    # Check if the input array is empty\n    if not arr:\n        return True\n    # Initialize a variable to keep track of the number of elements that are in their correct position\n    num_correct = 0\n    # Loop through the input array\n    for i in range(len(arr)):\n        # Check if the current element is in its correct position\n        if arr[i] == i + 1:\n            # If it is, increment the number of elements that are in their correct position\n            num_correct += 1\n    # Return True if all elements are in their correct position, False otherwise\n    return num_correct == len(arr)"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Step 1: Check if all elements in lst1 are even\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            return \"NO\"\n    # Step 2: Check if there are any even numbers in lst2\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 0:\n            # Step 3: If there is an even number in lst2, exchange it with the first odd number in lst1\n            lst1[0], lst2[i] = lst2[i], lst1[0]\n            return \"YES\"\n    # Step 4: If there are no even numbers in lst2, return \"NO\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Create an empty dictionary to store the counts\n    letter_counts = {}\n    \n    # Split the input string into individual letters\n    letters = test.split()\n    \n    # Iterate over the letters and increment the count for each one\n    for letter in letters:\n        if letter not in letter_counts:\n            letter_counts[letter] = 1\n        else:\n            letter_counts[letter] += 1\n    \n    # Find the letter with the highest count\n    max_count = max(letter_counts"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Step 1: Delete all characters in s that are equal to any character in c\n    for char in c:\n        s = s.replace(char, \"\")\n    # Step 2: Check if the result string is palindrome\n    return (s, s == s[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2 == 1:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(count) + \"ng \" + str(count) + \" of the \" + str(count) + \"nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            if current_sum < min_sum:\n                min_sum = current_sum\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    water = 0\n    count = 0\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                water += 1\n                grid[i][j] = 0\n                count += 1\n            if water == capacity:\n                water = 0\n                break\n        if water > 0 and j < cols - 1:\n            for k in range(j+1, cols):\n                if grid[i][k] == 1:\n                    water += 1\n                    grid[i][k] = 0\n                    count += 1\n                if water == capacity:\n                    water = 0\n                    break\n        if water > 0 and i < rows - 1:\n            for k in range(i+1, rows):\n                if grid[k][j] == 1:\n                    water += 1\n                    grid[k][j] = 0\n                    count += 1\n                if water == capacity:\n                    water = 0\n                    break\n\n    return count"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # Step 1: Convert each integer to its binary representation\n    binary_list = []\n    for num in arr:\n        binary_list.append(bin(num)[2:])\n\n    # Step 2: Count the number of ones in each binary representation\n    count_list = []\n    for binary_str in binary_list:\n        count = 0\n        for char in binary_str:\n            if char == \"1\":\n                count += 1\n        count_list.append(count)\n\n    # Step 3: Sort the list by number of ones, and then by decimal value\n    sorted_list = sorted(arr, key=lambda x: (count_list[x], x))\n\n    return sorted_list"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    for char in reversed(word):\n        if char not in \"aeiou\":\n            continue\n        if char != word[0] and char != word[-1]:\n            closest_vowel = char\n            break\n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    # Check if the length of both strings is even\n    if len(lst[0]) % 2 != 0 or len(lst[1]) % 2 != 0:\n        return \"No\"\n    \n    # Create a stack to keep track of the parentheses\n    stack = [lst[0][0]]\n    \n    # Iterate through the second string and check for balanced parentheses\n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i % 2 == 1:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # Step 1: Sort the input array in ascending order\n    arr.sort()\n    # Step 2: Initialize a variable to store the sum\n    sum = 0\n    # Step 3: Iterate over the first k elements of the sorted array\n    for i in range(k):\n        # Step 4: Check if the current element has at most two digits\n        if len(str(arr[i])) <= 2:\n            # Step 5: Add the current element to the sum\n            sum += arr[i]\n    # Step 6: Return the sum\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Initialize an empty list to store the odd numbers in the Collatz sequence\n    odd_numbers = []\n    \n    # Set the current number to n\n    current_number = n\n    \n    # Loop until the current number is 1\n    while current_number != 1:\n        # If the current number is even, divide it by 2\n        if current_number % 2 == 0:\n            current_number //= 2\n        # If the current number is odd, multiply it by 3 and add 1\n        else:\n            current_number = 3 * current_number + 1\n        \n        # If the current number is odd, add it to the list of odd numbers\n        if current_number % 2 == 1:\n            odd_numbers.append(current_number)\n    \n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = date.split('-')\n\n    # Check if the month is valid\n    if int(month) < 1 or int(month) > 12:\n        return False\n\n    # Check if the day is valid\n    if int(day) < 1 or int(day) > 31:\n        return False\n\n    # Check if the year is valid\n    if int(year) < 0 or len(str(year)) != 4:\n        return False\n\n    # Check if the date is in the format mm-dd-yyyy\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n\n    # Check if the day is valid for the month\n    if int(month) in [1, 3, 5, 7, 8, 10, 12] and int(day) > 31:\n        return False\n    elif int(month) in [4, 6, 9, 11] and int(day) > 3"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # Check if there are any whitespace characters in the input string\n    if txt.isspace():\n        return txt.split()\n    \n    # Check if there are any commas in the input string\n    elif ',' in txt:\n        return txt.split(',')\n    \n    # If neither whitespace nor comma characters exist, return the number of lower-case letters with odd order in the alphabet\n    else:\n        count = 0\n        for c in txt:\n            if ord("}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    # Check if list contains duplicates\n    if len(lst) != len(set(lst)):\n        return False\n    # Check if list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    intersection = (max(interval1[0], interval"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs = []\n    for num in arr:\n        if num > 0:\n            signs.append(1)\n        elif num < 0:\n            signs.append(-1)\n        else:\n            signs.append(0)\n    product = 1\n    for sign in signs:\n        product *= sign\n    return sum(arr) * product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Initialize the minimum path length to infinity\n    min_path_len = float('inf')\n    # Initialize the minimum path\n    min_path = []\n    # Loop through each cell in the grid\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            # Calculate the length of the path from the current cell to the destination cell\n            path_len = len(findPath(grid, i, j, k))\n            # If the path length is less than the minimum path length, update the minimum path length and minimum path\n            if path_len < min_path_len:\n                min_path_len = path_len\n                min_path = findPath(grid, i, j, k)\n    # Return the minimum path\n    return min_path\n\ndef findPath(grid, row, col, k):\n    # Base case: If the destination cell has been reached, return the path\n    if grid[row][col] == k:\n        return [k]\n    # Initialize the path to empty\n    path = []\n    # Loop through each neighbor of the current cell\n    for i in range(max(0, row-1), min(len(grid)-1, row+1"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 3]\n    else:\n        result = [0, 3]\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                result.append(result[i-1] + (i/2))\n            else:\n                result.append(result[i-2] + result[i-1] + result[i+1])\n        return result"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result *= n % 10\n        n //= 10\n    return result"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    # Check if the input string contains only square brackets\n    if not all(c == '[' or c == ']' for c in string):\n        return False\n    \n    # Initialize a stack to keep track of opening brackets\n    stack = []\n    \n    # Iterate through the input string and check each character\n    for char in string:\n        if char == '[':\n            # Push opening bracket onto the stack\n            stack.append(char)\n        elif char == ']':\n            # Pop top element from the stack\n            if not stack:\n                return False\n            stack.pop()\n    \n    # If the"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for elem in lst:\n        rounded_elem = math.ceil(elem)\n        squared_elem = rounded_elem ** 2\n        total += squared_elem\n    return total"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Check if the last character is a letter\n    if txt[-1].isalpha():\n        # Check if the last character is not part of a word\n        if txt[-1] != \" \":\n            return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest = -1\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            largest = i\n            break\n    return largest"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if len(lst) <= 1:\n        return (None, None)\n\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    # Convert all inputs to floats\n    a = float(a)\n    b = float(b)\n\n    # Check if the values are equal\n    if a == b:\n        return None\n\n    # Return the larger value in its original type\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    even_numbers = []\n    for i in range(2, int(n**0.5) + 1):\n        if i % 2 == 0:\n            even_numbers.append(i)\n    if len(even_numbers) != 4:\n        return False\n    return sum(even_numbers) == n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a positive integer\")\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Check if there are more than two consecutive spaces\n    if text.count(\"__\") > 2:\n        # Replace all consecutive spaces with a hyphen\n        text = text.replace(\"__\", \"-\")\n    \n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Check for more than three digits\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    \n    # Check for a dot\n    if '.' not in file_name:\n        return 'No'\n    \n    # Check if the substring before the dot starts with a letter from the Latin alphabet\n    if not file_name.split('.')[0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of the allowed extensions\n    if file_name"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return \" \".join(prime_words)\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # Parse the input strings to extract the numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the least common multiple (LCM) of the two denominators\n    lcm = x_den * n_den // math.gcd(x_den, n_den)\n\n    # Multiply both numerators by the LCM and compare with the product of the two denominators\n    return (lcm * x_num == lcm * n_num) and (lcm * x_den == lcm * n_den)"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    # Step 1: Calculate the sum of digits for each number\n    nums_sum = [(sum(map(int, str(n))), n) for n in nums]\n\n    # Step 2: Sort the list by the sum of digits\n    nums_sum.sort()\n\n    # Step 3: Return the sorted list\n    return [n for _, n in nums_sum]"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = []\n    for i in range(1, n+1):\n        a.append(i*i - i + 1)\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 < idx2:\n        return tuple(planets[idx1+1:idx2])\n    else:\n        return tuple(planets[idx1-1::-1] + planets[:idx2+1])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Step 1: Filter out strings with odd lengths\n    filtered_list = filter(lambda x: len(x) % 2 == 0, lst)\n    # Step 2: Sort the list by length of each word\n    sorted_list = sorted(filtered_list, key=len)\n    # Step 3: Return the sorted list\n    return sorted_list"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if not is_prime(n):\n        return y\n    else:\n        return x\n\n# Test cases\nprint(x_or_y(7, 34, 12)) # Output: 34\nprint(x_or_y(15, 8, 5)) # Output: 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    total = 0\n    for num in lst:\n        if num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(guess, game)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strengths = []\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strengths.append((extension, cap - sm))\n    return class_name + \".\" + max(strengths, key=lambda x: x[1])[0]"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    def is_rotation(word1, word2):\n        return word2 in word1 + word1\n    \n    if any(is_rotation(b, rotation) for rotation in a):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    if num < 0:\n        num *= -1\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        '1': 'i',\n        '2': 'ii',\n        '3': 'iii',\n        '4': 'iv',\n        '5': 'v',"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Check if the sum of any two sides is equal to the third side\n    if a + b != c and a + c != b and b + c != a:\n        return False\n    \n    # Check if the square of the length of one side is equal to the sum of the squares of the other two sides\n    if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n        return True\n    \n    # If neither condition is met, then the triangle is not a right-angled triangle\n    return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    # Create a dictionary to store the word and its unique character count\n    word_count = {}\n    \n    # Iterate over the list of words\n    for word in words:\n        # Calculate the number of unique characters in the word\n        unique_chars = set(word)\n        num_unique_chars = len(unique_chars)\n        \n        # Check if the word is already in the dictionary\n        if word not in word_count:\n            # If not, add it to the dictionary with its unique character count\n            word_count[word] = num_unique_chars\n        else:\n            # If it is already in the dictionary, check if the current count is higher\n            if num_unique_chars > word_count[word]:\n                # If it is, update the count\n                word_count[word] = num_unique_chars\n    \n    # Find the word with the highest unique character count\n    max_word = max(word_count, key=word_count.get)\n    \n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + need\n    carrots_left = remaining - need\n    if carrots_left < 0:\n        carrots_left = 0\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "completion": "  To implement this function in Python, we can follow these steps:\n\n1. Define the function with the appropriate parameters: `def do_algebra(operator, operand):`\n2. Check if the length of the operator list is equal to the length of the operand list minus one: `if len(operator) != len(operand) - 1:`\n3. If the condition in step 2 is not met, raise an error: `raise ValueError(\"Invalid input\")`\n4. Initialize a variable to store the result: `result = 0`\n5. Loop through each element in the operator list and perform the corresponding operation on the operand list:\n\t* If the current operator is '+', add the current operand to the result: `result += operand[i]`\n\t* If the current operator is '-', subtract the current operand from the result: `result -= operand[i]`\n\t* If the current operator is '*', multiply the current operand by the result: `result *= operand[i]`\n\t* If the current operator is '/', divide the result by the current operand: `result /= operand[i]`\n\t* If the current operator is '**', raise the result to the power of the current operand: `result **= operand[i]`\n6. Return the final result: `return result`\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        result = \"\"\n        for c in s:\n            if c.isalpha():\n                result += c.swapcase()\n            else:\n                result += c\n        return result"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return sorted(even_digits)"}
