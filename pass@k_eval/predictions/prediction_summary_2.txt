HumanEval/0

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for i, n1 in enumerate(numbers):
        for n2 in numbers[i+1:]:
            if abs(n1 - n2) <= threshold:
                return True
    return False

--------------------------------------------------
HumanEval/1

def separate_paren_groups(s):
    open_brace = 0
    start_index = 0
    result = []
    for i, c in enumerate(s):
        if c == '(':
            if open_brace == 0:
                start_index = i
            open_brace += 1
        elif c == ')':
            open_brace -= 1
            if open_brace == 0:
                result.append(s[start_index:i+1])
    return result

--------------------------------------------------
HumanEval/2

def truncate_number(number: float) -> float:
    return number % 1

--------------------------------------------------
HumanEval/3

def below_zero(operations):
    return any(operation < 0 for operation in operations)

--------------------------------------------------
HumanEval/4

def mean_absolute_deviation(numbers):
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)

--------------------------------------------------
HumanEval/5

def intersperse(numbers, delimeter):
    return [x for pair in zip(numbers[::2], numbers[1::2]) for x in pair] + numbers[-1:]

--------------------------------------------------
HumanEval/6

def parse_nested_parens(s):
    return [max(0, s.count('(') - s.count(')')) for s in s.split()]

--------------------------------------------------
HumanEval/7

def filter_by_substring(strings, substring):
    return [s for s in strings if substring in s]

--------------------------------------------------
HumanEval/8

def sum_product(numbers):
    return sum(numbers), prod(numbers) if numbers else (0, 1)

--------------------------------------------------
HumanEval/9

def rolling_max(numbers):
    return [max(numbers[:i+1]) for i in range(len(numbers))]

--------------------------------------------------
HumanEval/10

def make_palindrome(string):
    return string + string[::-1]

--------------------------------------------------
HumanEval/11

def string_xor(a, b):
    return ''.join('1' if a[i] != b[i] else '0' for i in range(len(a)))

--------------------------------------------------
HumanEval/12

def longest(strings):
    return max(strings, key=len) if strings else None

--------------------------------------------------
HumanEval/13

def greatest_common_divisor(a, b):
    return b if not a % b else greatest_common_divisor(b, a % b)

--------------------------------------------------
HumanEval/14

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]

--------------------------------------------------
HumanEval/15

def string_sequence(n: int) -> str:
    return " ".join(map(str, range(n+1)))

--------------------------------------------------
HumanEval/16

def count_distinct_characters(s):
    return len(set(s.lower()))

--------------------------------------------------
HumanEval/17

def parse_music(music_string: str) -> List[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[note] for note in music_string.split()]

--------------------------------------------------
HumanEval/18

def how_many_times(string, substring):
    return sum(string[i:i+len(substring)] == substring for i in range(len(string)))

--------------------------------------------------
HumanEval/19

def sort_numbers(numbers: str) -> str:
    return " ".join(sorted(numbers.split(), key=lambda x: ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"].index(x)))

--------------------------------------------------
HumanEval/20

def find_closest_elements(numbers):
    return min(numbers, key=lambda x: abs(x - numbers[0]))

--------------------------------------------------
HumanEval/21

def rescale_to_unit(numbers):
    low, high = min(numbers), max(numbers)
    return [(x - low) / (high - low) for x in numbers]

--------------------------------------------------
HumanEval/22

def filter_integers(my_list):
    return list(filter(lambda x: type(x) == int, my_list))

--------------------------------------------------
HumanEval/23

def strlen(s):
    return len(s)

--------------------------------------------------
HumanEval/24

def largest_divisor(n):
    return next(i for i in range(n, 0, -1) if n % i == 0)

--------------------------------------------------
HumanEval/25

def factorize(n):
    factors = []
    while n % 2 == 0:
        factors.append(2)
        n //= 2
    for i in range(3, int(n**0.5) + 1, 2):
        while n % i == 0:
            factors.append(i)
            n //= i
    if n > 2:
        factors.append(n)
    return factors

--------------------------------------------------
HumanEval/26

def remove_duplicates(numbers):
    return list(set(numbers))

--------------------------------------------------
HumanEval/27

def flip_case(s):
    return s.swapcase()

--------------------------------------------------
HumanEval/28

def concatenate(strings):
    return "".join(strings)

--------------------------------------------------
HumanEval/29

def filter_by_prefix(my_list, prefix):
    return list(filter(lambda x: x.startswith(prefix), my_list))

--------------------------------------------------
HumanEval/30

def get_positive(my_list):
    return list(filter(lambda x: x > 0, my_list))

--------------------------------------------------
HumanEval/31

def is_prime(n):
    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))

--------------------------------------------------
HumanEval/32

def find_zero(xs: list):
    """
    Finds a zero of the polynomial defined by the given coefficients xs.
    The function returns only one zero, even if multiple zeros exist.
    The function only takes lists xs with an even number of coefficients and the largest non-zero coefficient, which guarantees a solution.
    """
    return sum(xs) / len(xs)

--------------------------------------------------
HumanEval/33

def sort_third(l):
    return [sorted(val) if i % 3 else val for i, val in enumerate(l)]

--------------------------------------------------
HumanEval/34

def unique(my_list):
    return list(set(my_list))

--------------------------------------------------
HumanEval/35

def max_element(my_list):
    return max(my_list)

--------------------------------------------------
HumanEval/36

def fizz_buzz(n: int) -> int:
    return sum(str(i).count('7') for i in range(1, n) if i % 11 == 0 or i % 13 == 0)

--------------------------------------------------
HumanEval/37

def sort_even(l):
    return [x for x in sorted(l[1::2]) if x % 2 == 0] + [x for x in l if x % 2 != 0]

--------------------------------------------------
HumanEval/38

def decode_cyclic(s):
    return "".join([group[-1:] + group[:-1] for group in zip(*[iter(s)] * 3)])

--------------------------------------------------
HumanEval/39

def prime_fib(n: int) -> int:
    fib_seq = []
    curr_fib, next_fib = 1, 1
    for _ in range(n):
        if is_prime(curr_fib):
            fib_seq.append(curr_fib)
        curr_fib, next_fib = next_fib, curr_fib + next_fib
    return fib_seq[-1]

def is_prime(n: int) -> bool:
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

--------------------------------------------------
HumanEval/40

def triples_sum_to_zero(my_list):
    for i, j, k in itertools.combinations(my_list, 3):
        if i + j + k == 0:
            return True
    return False

--------------------------------------------------
HumanEval/41

def car_race_collision(n: int) -> int:
    return n * (n - 1) // 2

--------------------------------------------------
HumanEval/42

def incr_list(my_list):
    return list(map(lambda x: x + 1, my_list))

--------------------------------------------------
HumanEval/43

def pairs_sum_to_zero(my_list):
    for i, j in zip(my_list, reversed(my_list)):
        if i + j == 0:
            return True
    return False

--------------------------------------------------
HumanEval/44

def change_base(x, base):
    return bin(x)[2:].zfill(base)

--------------------------------------------------
HumanEval/45

def triangle_area(a, h):
    return a * h / 2

--------------------------------------------------
HumanEval/46

def fib4(n):
    if n <= 3:
        return 0
    if n == 4:
        return 2
    a, b, c, d = 0, 0, 2, 0
    for _ in range(5, n+1):
        a, b, c, d = b, c, d, a + b + c + d
    return d

--------------------------------------------------
HumanEval/47

def median(l):
    return sum(sorted(l)) / len(l) if len(l) % 2 else sorted(l)[len(l) // 2 - 1:len(l) // 2 + 1]

--------------------------------------------------
HumanEval/48

def is_palindrome(text):
    return text == text[::-1]

--------------------------------------------------
HumanEval/49

def modp(n, p):
    return 2 ** n % p

--------------------------------------------------
HumanEval/50

def decode_shift(s):
    return "".join(chr((ord(ch) - 5 - ord("a") % 26) + ord("a")) for ch in s)

--------------------------------------------------
HumanEval/51

def remove_vowels(text):
    return ''.join([char for char in text if char.lower() not in 'aeiou'])

--------------------------------------------------
HumanEval/52

def below_threshold(my_list, threshold):
    return all(x < threshold for x in my_list)

--------------------------------------------------
HumanEval/53

def add(x, y):
    """Add two numbers x and y"""
    return x + y

--------------------------------------------------
HumanEval/54

def same_chars(a, b):
    return sorted(a) == sorted(b)

--------------------------------------------------
HumanEval/55

def fib(n):
    if n <= 1:
        return n
    return fib(n-1) + fib(n-2)

--------------------------------------------------
HumanEval/56

def correct_bracketing(brackets):
    stack = []
    for char in brackets:
        if char == "<":
            stack.append(char)
        elif char == ">":
            if not stack:
                return False
            stack.pop()
    return not stack

--------------------------------------------------
HumanEval/57

def monotonic(l):
    return len(l) <= 1 or all(l[i] >= l[i-1] for i in range(1, len(l))) or all(l[i] <= l[i-1] for i in range(1, len(l)))

--------------------------------------------------
HumanEval/58

def common(l1, l2):
    return sorted(set(l1) & set(l2))

--------------------------------------------------
HumanEval/59

def largest_prime_factor(n):
    for i in range(int(n**0.5), 1, -1):
        if n % i == 0 and is_prime(i):
            return i
    return 1

def is_prime(n):
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

--------------------------------------------------
HumanEval/60

def sum_to_n(n):
    return (n * (n + 1)) // 2

--------------------------------------------------
HumanEval/61

def correct_bracketing(brackets):
    stack = []
    for char in brackets:
        if char == "(":
            stack.append(char)
        elif char == ")":
            if not stack:
                return False
            stack.pop()
    return not stack

--------------------------------------------------
HumanEval/62

def derivative(xs):
    return [i * xs[i] for i in range(1, len(xs)) if len(xs) > 1] + [0]

--------------------------------------------------
HumanEval/63

def fibfib(n):
    if n <= 2:
        return 0
    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)

--------------------------------------------------
HumanEval/64

def vowels_count(word):
    return sum(char.lower() in 'aeiou' for char in word)

--------------------------------------------------
HumanEval/65

def circular_shift(x, shift):
    return str(x)[-shift:] + str(x)[:-shift] if shift < len(str(x)) else str(x)[::-1]

--------------------------------------------------
HumanEval/66

def digit_sum(s):
    return sum(map(ord, filter(str.isupper, s)))

--------------------------------------------------
HumanEval/67

def fruit_distribution(s, n):
    return n - sum(map(int, s.split()))

--------------------------------------------------
HumanEval/68

def pluck(arr):
    if not arr:
        return []
    even_values = [x for x in arr if x % 2 == 0]
    if not even_values:
        return []
    smallest_even_value = min(even_values)
    smallest_even_index = arr.index(smallest_even_value)
    return [smallest_even_value, smallest_even_index]

--------------------------------------------------
HumanEval/69

def search(lst):
    freq = {}
    for num in lst:
        freq[num] = freq.get(num, 0) + 1
    return max(freq, key=lambda x: x if freq[x] >= x > 0 else -1)

--------------------------------------------------
HumanEval/70

def strange_sort_list(lst):
    return [x for x in lst if x % 2 == 0]

--------------------------------------------------
HumanEval/71

def triangle_area(a, b, c):
    return (a * b * c) / 2 if a + b > c and b + c > a and a + c > b else -1

--------------------------------------------------
HumanEval/72

def will_it_fly(q, w):
    return q == q[::-1] <= w

--------------------------------------------------
HumanEval/73

def smallest_change(arr):
    mid = len(arr) // 2
    changes = 0
    for i in range(mid):
        if arr[i] != arr[len-i-1]:
            changes += 1
            arr[i] = arr[len-i-1]
    return changes

--------------------------------------------------
HumanEval/74

def total_match(list1, list2):
    return list1 if sum(len(s) for s in list1) >= sum(len(s) for s in list2) else list2

--------------------------------------------------
HumanEval/75

def is_multiply_prime(a):
    return a > 0 and all(is_prime(i) for i in range(2, int(a**0.5) + 1) if a % i == 0)

def is_prime(n):
    return n > 1 and all(n % i for i in range(2, int(n**0.5) + 1))

--------------------------------------------------
HumanEval/76

def is_simple_power(x, n):
    return x == n ** (x // n)

--------------------------------------------------
HumanEval/77

def iscube(a):
    return a**(1/3) % 1 == 0

--------------------------------------------------
HumanEval/78

def hex_key(num):
    return sum(int(char, 16) in {2, 3, 5, 7, 11, 13, 17, 19} for char in num.upper())

--------------------------------------------------
HumanEval/79

def decimal_to_binary(decimal):
    return "db" + bin(decimal)[2:] + "db"

--------------------------------------------------
HumanEval/80

def is_happy(s):
    return len(s) < 3 or any(s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2] for i in range(len(s) - 2))

--------------------------------------------------
HumanEval/81

def numerical_letter_grade(grades):
    return ['A+' if grade >= 97 else 'A' if grade >= 93 else 'A-' if grade >= 90 else 'B+' if grade >= 87 else 'B' if grade >= 83 else 'B-' if grade >= 80 else 'C+' if grade >= 77 else 'C' if grade >= 73 else 'C-' if grade >= 70 else 'D+' if grade >= 67 else 'D' if grade >= 63 else 'D-' if grade >= 60 else 'E' for grade in grades]

--------------------------------------------------
HumanEval/82

def prime_length(s):
    return len(s) in {2, 3, 5, 7, 11}

--------------------------------------------------
HumanEval/83

def starts_one_ends(n):
    return len([i for i in range(10**(n-1), 10**n) if str(i)[0] == '1' or str(i)[-1] == '1'])

--------------------------------------------------
HumanEval/84

def solve(N):
    return bin(sum(map(int, str(N))))[2:]

--------------------------------------------------
HumanEval/85

def add(my_list):
    return sum(x for i, x in enumerate(my_list) if i % 2 and x % 2 == 0)

--------------------------------------------------
HumanEval/86

def anti_shuffle(s):
    return " ".join(sorted(s.split()))

--------------------------------------------------
HumanEval/87

def get_row(lst, x):
    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (x[0], -x[1]))

--------------------------------------------------
HumanEval/88

def sort_array(arr):
    return sorted(arr, reverse=sum(arr[0], arr[-1]) % 2 == 0)

--------------------------------------------------
HumanEval/89

def encrypt(s):
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    new_alphabet = alphabet[2:] + alphabet[:2]
    table = str.maketrans(alphabet, new_alphabet)
    return s.translate(table)

--------------------------------------------------
HumanEval/90

def next_smallest(my_list):
    return sorted(my_list)[1] if len(my_list) > 1 else None

--------------------------------------------------
HumanEval/91

def is_bored(string):
    return sum(1 for s in string.split('.')[:-1] if s.startswith('I'))

--------------------------------------------------
HumanEval/92

def any_int(x, y, z):
    return (x == y + z) or (y == x + z) or (z == x + y)

--------------------------------------------------
HumanEval/93

def encode(message):
    vowels = 'aeiou'
    encoded = ''
    for char in message:
        if char.isalpha():
            encoded += char.swapcase()
        else:
            encoded += char
    
    for i, char in enumerate(encoded):
        if char in vowels:
            encoded = encoded[:i] + chr(ord(char) + 2) + encoded[i+1:]
    
    return encoded

--------------------------------------------------
HumanEval/94

def get_largest_prime_sum(my_list):
    largest_prime = max((x for x in my_list if is_prime(x)), default=0)
    return sum(int(digit) for digit in str(largest_prime))

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

--------------------------------------------------
HumanEval/95

def check_dict_case(my_dict):
    return bool(my_dict) and all(key.islower() or key.isupper() for key in my_dict)

--------------------------------------------------
HumanEval/96

def count_up_to(n):
    return [i for i in range(2, n+1) if all(i % j != 0 for j in range(2, int(i**0.5) + 1))]

--------------------------------------------------
HumanEval/97

def multiply(a, b):
    return a * b

--------------------------------------------------
HumanEval/98

def count_upper(s):
    return sum(c.isupper() for i, c in enumerate(s) if i % 2 == 0)

--------------------------------------------------
HumanEval/99

def closest_integer(value):
    return round(value)

--------------------------------------------------
HumanEval/100

def make_a_pile(n):
    return [n // 2 if n % 2 == 0 else (n + 1) // 2 for _ in range(n)]

--------------------------------------------------
HumanEval/101

def words_string(my_string):
    return my_string.split()

--------------------------------------------------
HumanEval/102

def choose_num(x, y):
    return next((i for i in range(y, x-1, -1) if i % 2 == 0), -1)

--------------------------------------------------
HumanEval/103

def rounded_avg(n, m):
    if n > m:
        return -1
    return f"0b{bin(int(sum(range(n, m+1))/(m-n+1)))[2:]}"

--------------------------------------------------
HumanEval/104

def unique_digits(x):
    return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])

--------------------------------------------------
HumanEval/105

def by_length(arr):
    return sorted(arr, key=len, reverse=True)

--------------------------------------------------
HumanEval/106

def f(n):
    return [sum(range(1, i + 1)) if i % 2 else math.factorial(i) for i in range(1, n + 1)]

--------------------------------------------------
HumanEval/107

def even_odd_palindrome(n):
    return (len([i for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 == 0]),
            len([i for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 != 0]))

--------------------------------------------------
HumanEval/108

def count_nums(arr):
    return len([num for num in arr if sum(map(int, str(num))) > 0])

--------------------------------------------------
HumanEval/109

def move_one_ball(arr):
    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) if arr else True

--------------------------------------------------
HumanEval/110

def exchange(lst1, lst2):
    if all(x % 2 == 0 for x in lst1):
        return "YES"
    elif any(x % 2 == 0 for x in lst2):
        return "NO"
    else:
        lst1.sort()
        lst2.sort()
        i = 0
        j = 0
        while i < len(lst1) and j < len(lst2):
            if lst1[i] % 2 == 0 and lst2[j] % 2 != 0:
                lst1[i], lst2[j] = lst2[j], lst1[i]
                i += 1
                j += 1
            elif lst1[i] % 2 != 0 and lst2[j] % 2 == 0:
                lst1[i], lst2[j] = lst2[j], lst1[i]
                i += 1
                j += 1
            else:
                i += 1
        if all(x % 2 == 0 for x in lst1):
            return "YES"
        else:
            return "NO"

--------------------------------------------------
HumanEval/111

def histogram(string):
    return {letter: string.count(letter) for letter in set(string)}

--------------------------------------------------
HumanEval/112

def reverse_delete(s, c):
    return ("".join(char for char in s if char not in c), s == s[::-1])

--------------------------------------------------
HumanEval/113

def odd_count(my_list):
    return ["the number of odd elements {} in the string {} of the input.".format(len([x for x in s if int(x) % 2 == 1]), i) for i, s in enumerate(my_list)]

--------------------------------------------------
HumanEval/114

def minSubArraySum(nums):
    return min(sum(nums[i:j+1]) for i in range(len(nums)) for j in range(i, len(nums)))

--------------------------------------------------
HumanEval/115

def max_fill(grid, capacity):
    rows, cols = len(grid), len(grid[0])
    water, buckets = 0, 0
    for i in range(rows):
        for j in range(cols):
            if grid[i][j] == 1:
                water += 1
                if water == capacity:
                    buckets += 1
                    water = 0
    if water > 0:
        buckets += 1
    return buckets

--------------------------------------------------
HumanEval/116

def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))

--------------------------------------------------
HumanEval/117

def select_words(s, n):
    return [word for word in s.split() if len(word) == n]

--------------------------------------------------
HumanEval/118

Here's a shorter version of the code:
```python
def get_closest_vowel(word):
    vowels = "aeiou"
    for i in range(len(word)-1, 0, -1):
        if word[i] in vowels:
            return word[i]
    return ""
```

--------------------------------------------------
HumanEval/119

def match_parens(lst):
    return 'Yes' if len(lst) % 2 == 0 else 'No'

--------------------------------------------------
HumanEval/120

def maximum(arr, k):
    return sorted(arr, reverse=True)[:k]

--------------------------------------------------
HumanEval/121

def solution(my_list):
    return sum(x for i, x in enumerate(my_list) if i % 2 == 0 and x % 2 != 0)

--------------------------------------------------
HumanEval/122

def add_elements(arr, k):
    arr.sort()
    sum = 0
    for i in range(k):
        digit = arr[i] // 10
        if digit <= 2:
            sum += arr[i]
    return sum

--------------------------------------------------
HumanEval/123

def get_odd_collatz(n):
    if n <= 0:
        raise ValueError("n should be a positive integer.")
    return sorted([x for x in [1, 3 * n + 1][n % 2::2]])

--------------------------------------------------
HumanEval/124

import re

def valid_date(date):
    """
    Validates a given date string and returns True if the date is valid, otherwise False.

    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy
    """
    if not date:
        return False
    match = re.match(r'^(\d{2})-(\d{2})-(\d{4})$', date)
    if not match:
        return False
    month, day, year = map(int, match.groups())
    if month < 1 or month > 12:
        return False
    if day < 1 or day > 31:
        return False
    if month in [4, 6, 9, 11] and day == 31:
        return False
    if month == 2 and (day < 1 or day > 29):
        return False
    if year % 4 == 0 and month == 2 and day == 30:
        return False
    return True

--------------------------------------------------
HumanEval/125

def split_words(txt):
    if ' ' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.split(',')
    else:
        result = 0
        for char in txt:
            if ord(char) % 2 == 1:
                result += 1
        return result

--------------------------------------------------
HumanEval/126

def is_sorted(my_list):
    return all(my_list[i] <= my_list[i+1] for i in range(len(my_list)-1))

--------------------------------------------------
HumanEval/127

def intersection(interval1, interval2):
    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    return "YES" if start <= end and (end - start + 1) % 2 != 0 else "NO"

--------------------------------------------------
HumanEval/128

def prod_signs(arr):
    return None if not arr else sum(abs(num) * (-1) ** (num < 0) for num in arr)

--------------------------------------------------
HumanEval/129

import heapq

def min_path(grid, k):
    heap = [(grid[0][0], 0, 0)]
    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]
    result = []

    while len(heap) > 0 and len(result) < k:
        value, row, col = heapq.heappop(heap)
        if not visited[row][col]:
            result.append(value)
            visited[row][col] = True
            for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:
                if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and not visited[r][c]:
                    heapq.heappush(heap, (grid[r][c], r, c))

    return result

--------------------------------------------------
HumanEval/130

def tribonacci_sequence(n):
    if n == 1:
        return [1]
    elif n == 2:
        return [1, 3]
    else:
        seq = [1, 3]
        for i in range(2, n):
            seq.append(seq[i-1] + seq[i-2] + seq[i+1])
        return seq

--------------------------------------------------
HumanEval/131

def digits(n):
    return [int(i) for i in str(n)]

--------------------------------------------------
HumanEval/132

def is_nested(s):
    return s.count('[') == s.count(']')

--------------------------------------------------
HumanEval/133

def sum_squares(my_list):
    return sum(x**2 for x in my_list)

--------------------------------------------------
HumanEval/134

def check_if_last_char_is_a_letter(txt):
    return txt and txt[-1].isalpha() and txt[-1] not in "abcdefghijklmnopqrstuvwxyz"

--------------------------------------------------
HumanEval/135

def can_arrange(arr):
    for i in range(len(arr) - 1, -1, -1):
        if arr[i] > arr[i - 1]:
            return i
    return -1

--------------------------------------------------
HumanEval/136

def largest_smallest_integers(lst):
    return (max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x > 0, lst)))

--------------------------------------------------
HumanEval/137

def compare_one(a, b):
    a, b = map(lambda x: float(x.replace(",", ".")) if type(x) is str else x, (a, b))
    return None if a == b else (a if a > b else b)

--------------------------------------------------
HumanEval/138

def is_equal_to_sum_even(n):
    return n % 2 == 0 and any(n == i + j + k + l for i in range(2, int(n**0.5) + 1, 2) for j in range(2, int(n**0.5) + 1, 2) for k in range(2, int(n**0.5) + 1, 2) for l in range(2, int(n**0.5) + 1, 2))

--------------------------------------------------
HumanEval/139

def special_factorial(n):
    return n * special_factorial(n-1) if n > 1 else 1

--------------------------------------------------
HumanEval/140

def fix_spaces(text):
    return text.replace(" ", "_").replace("  ", "-")

--------------------------------------------------
HumanEval/141

def file_name_check(file_name):
    return 'Yes' if len([c for c in file_name if c.isdigit()]) <= 3 and '.' in file_name and len(file_name.split('.')[0]) > 0 and file_name.split('.')[1] in ['txt', 'exe', 'dll'] else 'No'

--------------------------------------------------
HumanEval/142

def sum_squares(lst):
    return sum(x**(i%3 or i%4+1) for i, x in enumerate(lst))

--------------------------------------------------
HumanEval/143

def words_in_sentence(sentence):
    return " ".join([word for word in sentence.split() if is_prime(len(word))])

def is_prime(n):
    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))

--------------------------------------------------
HumanEval/144

def simplify(x, n):
    return (int(x.split('/')[0]) * int(n.split('/')[0])) % (int(x.split('/')[1]) * int(n.split('/')[1])) == 0

--------------------------------------------------
HumanEval/145

def order_by_points(nums):
    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))

--------------------------------------------------
HumanEval/146

def special_filter(nums):
    return sum(num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 100 in [1, 3, 5, 7, 9] for num in nums)

--------------------------------------------------
HumanEval/147

def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    return sum(a[i] + a[j] + a[k] % 3 == 0 for i in range(len(a)) for j in range(i + 1, len(a)) for k in range(j + 1, len(a)))

--------------------------------------------------
HumanEval/148

def between_planets(p1, p2):
    planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"]
    return tuple(planets[planets.index(p1)+1:planets.index(p2)])

--------------------------------------------------
HumanEval/149

def list_sort(my_list):
    return sorted(my_list, key=lambda x: (len(x), x))

--------------------------------------------------
HumanEval/150

def x_or_y(n, x, y):
    return x if is_prime(n) else y

def is_prime(n):
    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))

--------------------------------------------------
HumanEval/151

def double_the_difference(lst):
    return sum(num ** 2 for num in lst if num % 2 != 0 and num > 0 and num == int(num))

--------------------------------------------------
HumanEval/152

def compare(scores, guesses):
    return list(map(lambda x: abs(x[0] - x[1]), zip(scores, guesses)))

--------------------------------------------------
HumanEval/153

def strongest_extension(class_name, extensions):
    return max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))

--------------------------------------------------
HumanEval/154

def cycpattern_check(word1, word2):
    return word2 in word1 * 2 and word1 != word2

--------------------------------------------------
HumanEval/155

def even_odd_count(n):
    even = 0
    odd = 0
    while n:
        if n % 2 == 0:
            even += 1
        else:
            odd += 1
        n //= 10
    return (even, odd)

--------------------------------------------------
HumanEval/156

def int_to_mini_roman(n):
    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    numerals = 'm cm d cd c xc l xl x ix v iv i'.split()
    roman = ''
    for i, v in enumerate(values):
        while n >= v:
            roman += numerals[i]
            n -= v
    return roman

--------------------------------------------------
HumanEval/157

def right_angle_triangle(a, b, c):
    return any([(a**2 + b**2 == c**2), (b**2 + c**2 == a**2), (c**2 + a**2 == b**2)])

--------------------------------------------------
HumanEval/158

def find_max(words):
    return max(words, key=len) if words else None

--------------------------------------------------
HumanEval/159

def eat(number, need, remaining):
    return [min(remaining, number + need), remaining - min(remaining, number + need)]

--------------------------------------------------
HumanEval/160

def do_algebra(operator, operand):
    result = operand[0]
    for op, o in zip(operator, operand[1:]):
        if op == '+':
            result += o
        elif op == '-':
            result -= o
        elif op == '*':
            result *= o
        elif op == '//':
            result //= o
        elif op == '**':
            result **= o
        else:
            raise ValueError("Invalid operator")
    return result

--------------------------------------------------
HumanEval/161

def solve(s):
    return "".join(c.upper() if c.islower() else c.lower() for c in s) or s[::-1]

--------------------------------------------------
HumanEval/162

import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None

--------------------------------------------------
HumanEval/163

def generate_integers(a, b):
    return [i for i in range(a, b+1) if i % 2 == 0]

--------------------------------------------------
