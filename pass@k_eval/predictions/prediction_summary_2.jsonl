{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i, n1 in enumerate(numbers):\n        for n2 in numbers[i+1:]:\n            if abs(n1 - n2) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(s):\n    open_brace = 0\n    start_index = 0\n    result = []\n    for i, c in enumerate(s):\n        if c == '(':\n            if open_brace == 0:\n                start_index = i\n            open_brace += 1\n        elif c == ')':\n            open_brace -= 1\n            if open_brace == 0:\n                result.append(s[start_index:i+1])\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number % 1"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations):\n    return any(operation < 0 for operation in operations)"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers, delimeter):\n    return [x for pair in zip(numbers[::2], numbers[1::2]) for x in pair] + numbers[-1:]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(s):\n    return [max(0, s.count('(') - s.count(')')) for s in s.split()]"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers):\n    return sum(numbers), prod(numbers) if numbers else (0, 1)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers):\n    return [max(numbers[:i+1]) for i in range(len(numbers))]"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string):\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a, b):\n    return ''.join('1' if a[i] != b[i] else '0' for i in range(len(a)))"}
{"task_id": "HumanEval/12", "completion": "def longest(strings):\n    return max(strings, key=len) if strings else None"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    return b if not a % b else greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, range(n+1)))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(s):\n    return len(set(s.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[note] for note in music_string.split()]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string, substring):\n    return sum(string[i:i+len(substring)] == substring for i in range(len(string)))"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    return \" \".join(sorted(numbers.split(), key=lambda x: [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"].index(x)))"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers):\n    return min(numbers, key=lambda x: abs(x - numbers[0]))"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers):\n    low, high = min(numbers), max(numbers)\n    return [(x - low) / (high - low) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(my_list):\n    return list(filter(lambda x: type(x) == int, my_list))"}
{"task_id": "HumanEval/23", "completion": "def strlen(s):\n    return len(s)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n):\n    return next(i for i in range(n, 0, -1) if n % i == 0)"}
{"task_id": "HumanEval/25", "completion": "def factorize(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers):\n    return list(set(numbers))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(s):\n    return s.swapcase()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings):\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(my_list, prefix):\n    return list(filter(lambda x: x.startswith(prefix), my_list))"}
{"task_id": "HumanEval/30", "completion": "def get_positive(my_list):\n    return list(filter(lambda x: x > 0, my_list))"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    \"\"\"\n    Finds a zero of the polynomial defined by the given coefficients xs.\n    The function returns only one zero, even if multiple zeros exist.\n    The function only takes lists xs with an even number of coefficients and the largest non-zero coefficient, which guarantees a solution.\n    \"\"\"\n    return sum(xs) / len(xs)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    return [sorted(val) if i % 3 else val for i, val in enumerate(l)]"}
{"task_id": "HumanEval/34", "completion": "def unique(my_list):\n    return list(set(my_list))"}
{"task_id": "HumanEval/35", "completion": "def max_element(my_list):\n    return max(my_list)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    return sum(str(i).count('7') for i in range(1, n) if i % 11 == 0 or i % 13 == 0)"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    return [x for x in sorted(l[1::2]) if x % 2 == 0] + [x for x in l if x % 2 != 0]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s):\n    return \"\".join([group[-1:] + group[:-1] for group in zip(*[iter(s)] * 3)])"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    fib_seq = []\n    curr_fib, next_fib = 1, 1\n    for _ in range(n):\n        if is_prime(curr_fib):\n            fib_seq.append(curr_fib)\n        curr_fib, next_fib = next_fib, curr_fib + next_fib\n    return fib_seq[-1]\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(my_list):\n    for i, j, k in itertools.combinations(my_list, 3):\n        if i + j + k == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(my_list):\n    return list(map(lambda x: x + 1, my_list))"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(my_list):\n    for i, j in zip(my_list, reversed(my_list)):\n        if i + j == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x, base):\n    return bin(x)[2:].zfill(base)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return a * h / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    if n <= 3:\n        return 0\n    if n == 4:\n        return 2\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(5, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    return sum(sorted(l)) / len(l) if len(l) % 2 else sorted(l)[len(l) // 2 - 1:len(l) // 2 + 1]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n, p):\n    return 2 ** n % p"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s):\n    return \"\".join(chr((ord(ch) - 5 - ord(\"a\") % 26) + ord(\"a\")) for ch in s)"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(my_list, threshold):\n    return all(x < threshold for x in my_list)"}
{"task_id": "HumanEval/53", "completion": "def add(x, y):\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(a, b):\n    return sorted(a) == sorted(b)"}
{"task_id": "HumanEval/55", "completion": "def fib(n):\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    return len(l) <= 1 or all(l[i] >= l[i-1] for i in range(1, len(l))) or all(l[i] <= l[i-1] for i in range(1, len(l)))"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    for i in range(int(n**0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef is_prime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n):\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs)) if len(xs) > 1] + [0]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n <= 2:\n        return 0\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(word):\n    return sum(char.lower() in 'aeiou' for char in word)"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    return str(x)[-shift:] + str(x)[:-shift] if shift < len(str(x)) else str(x)[::-1]"}
{"task_id": "HumanEval/66", "completion": "def digit_sum(s):\n    return sum(map(ord, filter(str.isupper, s)))"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    return n - sum(map(int, s.split()))"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even_value = min(even_values)\n    smallest_even_index = arr.index(smallest_even_value)\n    return [smallest_even_value, smallest_even_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    return max(freq, key=lambda x: x if freq[x] >= x > 0 else -1)"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    return [x for x in lst if x % 2 == 0]"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    return (a * b * c) / 2 if a + b > c and b + c > a and a + c > b else -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    mid = len(arr) // 2\n    changes = 0\n    for i in range(mid):\n        if arr[i] != arr[len-i-1]:\n            changes += 1\n            arr[i] = arr[len-i-1]\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(list1, list2):\n    return list1 if sum(len(s) for s in list1) >= sum(len(s) for s in list2) else list2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    return a > 0 and all(is_prime(i) for i in range(2, int(a**0.5) + 1) if a % i == 0)\n\ndef is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n**0.5) + 1))"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n ** (x // n)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a**(1/3) % 1 == 0"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    return sum(int(char, 16) in {2, 3, 5, 7, 11, 13, 17, 19} for char in num.upper())"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    return len(s) < 3 or any(s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2] for i in range(len(s) - 2))"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return ['A+' if grade >= 97 else 'A' if grade >= 93 else 'A-' if grade >= 90 else 'B+' if grade >= 87 else 'B' if grade >= 83 else 'B-' if grade >= 80 else 'C+' if grade >= 77 else 'C' if grade >= 73 else 'C-' if grade >= 70 else 'D+' if grade >= 67 else 'D' if grade >= 63 else 'D-' if grade >= 60 else 'E' for grade in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(s):\n    return len(s) in {2, 3, 5, 7, 11}"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    return len([i for i in range(10**(n-1), 10**n) if str(i)[0] == '1' or str(i)[-1] == '1'])"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(my_list):\n    return sum(x for i, x in enumerate(my_list) if i % 2 and x % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return \" \".join(sorted(s.split()))"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(arr):\n    return sorted(arr, reverse=sum(arr[0], arr[-1]) % 2 == 0)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    table = str.maketrans(alphabet, new_alphabet)\n    return s.translate(table)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(my_list):\n    return sorted(my_list)[1] if len(my_list) > 1 else None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(string):\n    return sum(1 for s in string.split('.')[:-1] if s.startswith('I'))"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiou'\n    encoded = ''\n    for char in message:\n        if char.isalpha():\n            encoded += char.swapcase()\n        else:\n            encoded += char\n    \n    for i, char in enumerate(encoded):\n        if char in vowels:\n            encoded = encoded[:i] + chr(ord(char) + 2) + encoded[i+1:]\n    \n    return encoded"}
{"task_id": "HumanEval/94", "completion": "def get_largest_prime_sum(my_list):\n    largest_prime = max((x for x in my_list if is_prime(x)), default=0)\n    return sum(int(digit) for digit in str(largest_prime))\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(my_dict):\n    return bool(my_dict) and all(key.islower() or key.isupper() for key in my_dict)"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    return [i for i in range(2, n+1) if all(i % j != 0 for j in range(2, int(i**0.5) + 1))]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return a * b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(c.isupper() for i, c in enumerate(s) if i % 2 == 0)"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    return round(value)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    return [n // 2 if n % 2 == 0 else (n + 1) // 2 for _ in range(n)]"}
{"task_id": "HumanEval/101", "completion": "def words_string(my_string):\n    return my_string.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    return next((i for i in range(y, x-1, -1) if i % 2 == 0), -1)"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    return f\"0b{bin(int(sum(range(n, m+1))/(m-n+1)))[2:]}\""}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    return sorted(arr, key=len, reverse=True)"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return [sum(range(1, i + 1)) if i % 2 else math.factorial(i) for i in range(1, n + 1)]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    return (len([i for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 == 0]),\n            len([i for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 != 0]))"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return len([num for num in arr if sum(map(int, str(num))) > 0])"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) if arr else True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    elif any(x % 2 == 0 for x in lst2):\n        return \"NO\"\n    else:\n        lst1.sort()\n        lst2.sort()\n        i = 0\n        j = 0\n        while i < len(lst1) and j < len(lst2):\n            if lst1[i] % 2 == 0 and lst2[j] % 2 != 0:\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                i += 1\n                j += 1\n            elif lst1[i] % 2 != 0 and lst2[j] % 2 == 0:\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                i += 1\n                j += 1\n            else:\n                i += 1\n        if all(x % 2 == 0 for x in lst1):\n            return \"YES\"\n        else:\n            return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(string):\n    return {letter: string.count(letter) for letter in set(string)}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    return (\"\".join(char for char in s if char not in c), s == s[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(my_list):\n    return [\"the number of odd elements {} in the string {} of the input.\".format(len([x for x in s if int(x) % 2 == 1]), i) for i, s in enumerate(my_list)]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    return min(sum(nums[i:j+1]) for i in range(len(nums)) for j in range(i, len(nums)))"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    water, buckets = 0, 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                water += 1\n                if water == capacity:\n                    buckets += 1\n                    water = 0\n    if water > 0:\n        buckets += 1\n    return buckets"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    return [word for word in s.split() if len(word) == n]"}
{"task_id": "HumanEval/118", "completion": "Here's a shorter version of the code:\n```python\ndef get_closest_vowel(word):\n    vowels = \"aeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n```"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    return 'Yes' if len(lst) % 2 == 0 else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(my_list):\n    return sum(x for i, x in enumerate(my_list) if i % 2 == 0 and x % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    arr.sort()\n    sum = 0\n    for i in range(k):\n        digit = arr[i] // 10\n        if digit <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n <= 0:\n        raise ValueError(\"n should be a positive integer.\")\n    return sorted([x for x in [1, 3 * n + 1][n % 2::2]])"}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid, otherwise False.\n\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n    if not date:\n        return False\n    match = re.match(r'^(\\d{2})-(\\d{2})-(\\d{4})$', date)\n    if not match:\n        return False\n    month, day, year = map(int, match.groups())\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day == 31:\n        return False\n    if month == 2 and (day < 1 or day > 29):\n        return False\n    if year % 4 == 0 and month == 2 and day == 30:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        result = 0\n        for char in txt:\n            if ord(char) % 2 == 1:\n                result += 1\n        return result"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(my_list):\n    return all(my_list[i] <= my_list[i+1] for i in range(len(my_list)-1))"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    return \"YES\" if start <= end and (end - start + 1) % 2 != 0 else \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    return None if not arr else sum(abs(num) * (-1) ** (num < 0) for num in arr)"}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef min_path(grid, k):\n    heap = [(grid[0][0], 0, 0)]\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n\n    while len(heap) > 0 and len(result) < k:\n        value, row, col = heapq.heappop(heap)\n        if not visited[row][col]:\n            result.append(value)\n            visited[row][col] = True\n            for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n                if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and not visited[r][c]:\n                    heapq.heappush(heap, (grid[r][c], r, c))\n\n    return result"}
{"task_id": "HumanEval/130", "completion": "def tribonacci_sequence(n):\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        seq = [1, 3]\n        for i in range(2, n):\n            seq.append(seq[i-1] + seq[i-2] + seq[i+1])\n        return seq"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    return [int(i) for i in str(n)]"}
{"task_id": "HumanEval/132", "completion": "def is_nested(s):\n    return s.count('[') == s.count(']')"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(my_list):\n    return sum(x**2 for x in my_list)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyz\""}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] > arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    return (max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x > 0, lst)))"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    a, b = map(lambda x: float(x.replace(\",\", \".\")) if type(x) is str else x, (a, b))\n    return None if a == b else (a if a > b else b)"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and any(n == i + j + k + l for i in range(2, int(n**0.5) + 1, 2) for j in range(2, int(n**0.5) + 1, 2) for k in range(2, int(n**0.5) + 1, 2) for l in range(2, int(n**0.5) + 1, 2))"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    return n * special_factorial(n-1) if n > 1 else 1"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    return 'Yes' if len([c for c in file_name if c.isdigit()]) <= 3 and '.' in file_name and len(file_name.split('.')[0]) > 0 and file_name.split('.')[1] in ['txt', 'exe', 'dll'] else 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(x**(i%3 or i%4+1) for i, x in enumerate(lst))"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\ndef is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    return (int(x.split('/')[0]) * int(n.split('/')[0])) % (int(x.split('/')[1]) * int(n.split('/')[1])) == 0"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))"}
{"task_id": "HumanEval/146", "completion": "def special_filter(nums):\n    return sum(num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 100 in [1, 3, 5, 7, 9] for num in nums)"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(a[i] + a[j] + a[k] % 3 == 0 for i in range(len(a)) for j in range(i + 1, len(a)) for k in range(j + 1, len(a)))"}
{"task_id": "HumanEval/148", "completion": "def between_planets(p1, p2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    return tuple(planets[planets.index(p1)+1:planets.index(p2)])"}
{"task_id": "HumanEval/149", "completion": "def list_sort(my_list):\n    return sorted(my_list, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    return x if is_prime(n) else y\n\ndef is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(num ** 2 for num in lst if num % 2 != 0 and num > 0 and num == int(num))"}
{"task_id": "HumanEval/152", "completion": "def compare(scores, guesses):\n    return list(map(lambda x: abs(x[0] - x[1]), zip(scores, guesses)))"}
{"task_id": "HumanEval/153", "completion": "def strongest_extension(class_name, extensions):\n    return max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(word1, word2):\n    return word2 in word1 * 2 and word1 != word2"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(n):\n    even = 0\n    odd = 0\n    while n:\n        if n % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        n //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(n):\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = 'm cm d cd c xc l xl x ix v iv i'.split()\n    roman = ''\n    for i, v in enumerate(values):\n        while n >= v:\n            roman += numerals[i]\n            n -= v\n    return roman"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return any([(a**2 + b**2 == c**2), (b**2 + c**2 == a**2), (c**2 + a**2 == b**2)])"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    return max(words, key=len) if words else None"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    return [min(remaining, number + need), remaining - min(remaining, number + need)]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for op, o in zip(operator, operand[1:]):\n        if op == '+':\n            result += o\n        elif op == '-':\n            result -= o\n        elif op == '*':\n            result *= o\n        elif op == '//':\n            result //= o\n        elif op == '**':\n            result **= o\n        else:\n            raise ValueError(\"Invalid operator\")\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    return \"\".join(c.upper() if c.islower() else c.lower() for c in s) or s[::-1]"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]"}
