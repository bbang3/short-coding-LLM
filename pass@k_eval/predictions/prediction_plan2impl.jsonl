{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            current_group += char\n        elif char == \")\":\n            current_group += char\n            result.append(current_group)\n            current_group = \"\"\n        else:\n            continue\n    return result"}
{"task_id": "HumanEval/2", "completion": "import math\n\ndef truncate_number(number: float) -> float:\n    \"\"\"\n    Truncates a positive floating point number and returns its decimal part.\n\n    Parameters\n    ----------\n    number : float\n        A positive floating point number.\n\n    Returns\n    -------\n    float\n        The decimal part of the number.\n\n    Raises\n    ------\n    ValueError\n        If the input number is not positive.\n\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"The input number must be positive.\")\n    integer, decimals = math.modf(number)\n    return decimals"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            balance -= abs(operation)\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculates the Mean Absolute Deviation of a list of numbers.\n\n    The Mean Absolute Deviation is the average absolute difference between each element and the mean of the dataset.\n\n    Parameters\n    ----------\n    numbers : List[float]\n        The input list of numbers.\n\n    Returns\n    -------\n    float\n        The Mean Absolute Deviation of the input list.\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    tokens = paren_string.split()\n    max_levels = []\n    current_level = 0\n    for token in tokens:\n        if token == '(':\n            current_level += 1\n        elif token == ')':\n            current_level -= 1\n        else:\n            max_levels.append(current_level)\n    return max_levels"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(my_list, substring):\n    return [s for s in my_list if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    result = (0, 1)\n    for num in numbers:\n        result = (result[0] + num, result[1] * num)\n    return result"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = 0\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Find the shortest palindrome that begins with a supplied string.\n\n    Algorithm idea is simple:\n        - Find the longest postfix of supplied string that is a palindrome.\n        - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    prefix = \"\"\n    suffix = string\n\n    for i in range(len(string)):\n        if string[i] != string[-1]:\n            break\n        prefix = string[:i+1]\n        suffix = string[i+1:]\n\n    return prefix + suffix[::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = \"\"\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of two integers a and b\n    \"\"\"\n    if a == 0 or b == 0:\n        return abs(a - b)\n\n    gcd = min(a, b)\n\n    while gcd != 1:\n        if a % gcd == 0 and b % gcd == 0:\n            return gcd\n        gcd -= 1\n\n    return 1"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    unique_chars = set()\n    for char in string:\n        if char.lower() not in unique_chars:\n            unique_chars.add(char.lower())\n    return len(unique_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parse a string representing musical notes in a special ASCII format and return a list of integers corresponding to the beat lengths.\n    \"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    beat_lengths = []\n    for note in notes:\n        beat_lengths.append(note_map[note])\n    return beat_lengths"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    num_tokens = numbers.split()\n    num_values = []\n    for token in num_tokens:\n        if token == \"zero\":\n            num_values.append(0)\n        elif token == \"one\":\n            num_values.append(1)\n        elif token == \"two\":\n            num_values.append(2)\n        elif token == \"three\":\n            num_values.append(3)\n        elif token == \"four\":\n            num_values.append(4)\n        elif token == \"five\":\n            num_values.append(5)\n        elif token == \"six\":\n            num_values.append(6)\n        elif token == \"seven\":\n            num_values.append(7)\n        elif token == \"eight\":\n            num_values.append(8)\n        elif token == \"nine\":\n            num_values.append(9)\n    sorted_values = sorted(num_values)\n    sorted_tokens = []\n    for value in sorted_values:\n        if value == 0:\n            sorted_tokens.append(\"zero\")\n        elif value == 1:\n            sorted_tokens.append(\"one\")"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    Find and return the closest pair of elements in a given list of numbers.\n    The elements in the pair should be returned in ascending order.\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_list = sorted(numbers)\n\n    # Initialize the minimum difference and the closest pair\n    min_diff = float(\"inf\")\n    closest_pair = ()\n\n    # Iterate over the sorted list\n    for i in range(len(sorted_list) - 1):\n        # Calculate the difference between the current element and its previous element\n        diff = sorted_list[i + 1] - sorted_list[i]\n\n        # If the difference is less than the minimum difference, update the minimum difference and the closest pair\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_list[i], sorted_list[i + 1])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers):\n    # sort the list in ascending order\n    numbers.sort()\n    # get the minimum and maximum values\n    min_value = numbers[0]\n    max_value = numbers[-1]\n    # calculate the range of the data\n    range_value = max_value - min_value\n    # create a new list to store the rescaled values\n    rescaled_values = []\n    # iterate over the original list of numbers and calculate the rescaled value for each number\n    for number in numbers:\n        rescaled_value = (number - min_value) / range_value\n        rescaled_values.append(rescaled_value)\n    return rescaled_values"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    1. Define the function `strlen` with a single parameter `string`, which is of type `str`.\n    2. Use the built-in `len` function to get the length of the input string.\n    3. Return the length of the input string as an integer value.\n    4. Test the function with two examples: an empty string and a non-empty string.\n    5. Use the `doctest` module to run the tests and verify that the function behaves correctly.\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    max_divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\"\n    Return a list of prime factors of a given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in the factorization.\n    Input number should be equal to the product of all factors.\n    \"\"\"\n    if n <= 0:\n        return []\n    prime_factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    if n > 1:\n        prime_factors.append(n)\n    return prime_factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers):\n    unique_elements = []\n    for num in numbers:\n        if num not in unique_elements:\n            unique_elements.append(num)\n    return unique_elements"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    result = \"\"\n    for string in strings:\n        result += string\n    return result"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings, prefix):\n    filtered_list = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_list.append(string)\n    return filtered_list\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(my_list):\n    return [x for x in my_list if x >= 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    assert len(xs) % 2 == 0 and xs[-1] != 0, \"Invalid input\"\n    x = random.uniform(-10, 10)\n    for _ in range(100):\n        p = poly(xs, x)\n        if abs(p) < 0.001:\n            return x\n        d = derivative(xs, x)\n        if d == 0:\n            break\n        x -= p / d\n    raise Exception(\"Failed to find zero\")"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    l_new = []\n    for i, elem in enumerate(l):\n        if i % 3 != 0:\n            l_new.append(elem)\n        else:\n            l_sorted = sorted(l[i:])\n            l_new.extend(l_sorted)\n    return l_new"}
{"task_id": "HumanEval/34", "completion": "def unique(my_list):\n    return sorted(set(my_list))"}
{"task_id": "HumanEval/35", "completion": "def max_element(my_list):\n    max_value = my_list[0]\n    for i in range(1, len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    return max_value"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(my_list):\n    l = my_list[:]\n    for i in range(0, len(l), 2):\n        if l[i] > l[i+1]:\n            l[i], l[i+1] = l[i+1], l[i]\n    return l"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    1. Split the input string into groups of three characters each. If the length of the string is not divisible by 3, then add two empty strings at the end to make the last group have three elements.\n    2. For each group, cycle the elements in the group so that the first element becomes the third, the second element becomes the first, and the third element becomes the second. If the group has fewer than three elements, leave it unchanged.\n    3. Join all the groups together to form the decoded string.\n    \"\"\"\n    # split string into groups of 3 characters each\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the n-th prime number in the Fibonacci sequence.\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n        if is_prime(b):\n            return b\n    raise ValueError(\"No prime Fibonacci number found for the given input\")\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Returns True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(my_list):\n    found_triple = False\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)):\n            if my_list[i] + my_list[j] == 0:\n                found_triple = True\n                break\n    return found_triple"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    1. Define two sets of cars, one driving left to right and the other driving right to left.\n    2. Initialize a variable to keep track of the number of collisions.\n    3. For each car in the left-to-right set, check if it has collided with any car in the right-to-left set.\n    4. If there is a collision, increment the collision counter by 1.\n    5. Repeat step 3 for all cars in both sets.\n    6. Return the value of the collision counter as the output of the function."}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    new_list = []\n    for i in l:\n        new_list.append(i+1)\n    return new_list"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(my_list):\n    unique_elements = set()\n    for x in my_list:\n        if x not in unique_elements:\n            unique_elements.add(x)\n    for x in unique_elements:\n        if -x in unique_elements:\n            return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    1. Check if the input number x and base are valid. If not, raise an error.\n    2. Convert the input number x to a string.\n    3. Initialize an empty list to store the digits of the converted number.\n    4. Loop through each digit of the converted number and perform the following steps:\n    a. Divide the digit by the base using integer division.\n    b. Get the remainder of the division.\n    c. Add the remainder to the list of digits.\n    5. Join the list of digits into a string and return it as the final result.\n    \"\"\"\n    if not isinstance(x, int) or not isinstance(base, int):\n        raise ValueError(\"Inputs must be integers\")\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    fib4_dict = {0: 0, 1: 0, 2: 2, 3: 0}\n    for i in range(4, n+1):\n        fib4_dict[i] = fib4_dict[i-1] + fib4_dict[i-2] + fib4_dict[i-3] + fib4_dict[i-4]\n    return fib4_dict[n]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    1. Sort the input list `l` in ascending order.\n    2. If the length of the sorted list is odd, return the middle element of the list.\n    3. If the length of the sorted list is even, return the average of the two middle elements of the list.\n    4. Handle edge cases such as an empty input list or a list with only one element.\n    \"\"\"\n    if not l:\n        return None\n    sorted_l = sorted(l)\n    length = len(sorted_l)\n    if length % 2 == 0:\n        middle_index = int(length / 2)\n        return (sorted_l[middle_index - 1] + sorted_l[middle_index]) / 2\n    else:\n        middle_index = int((length + 1) / 2)\n        return sorted_l[middle_index - 1]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    i, j = 0, len(text) - 1\n    while i < j:\n        if text[i] != text[j]:\n            return False\n        i += 1\n        j -= 1\n    return True"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    for _ in range(n):\n        result *= 2\n    return result % p"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    1. Define a variable `decoded` and initialize it to an empty string.\n    2. Loop through each character in the input string `s`.\n    3. For each character, calculate its ASCII code using the `ord()` function.\n    4. Subtract 5 from the ASCII code to shift the character by -5 positions in the alphabet.\n    5. Use the modulo operator (`%`) to wrap around to the beginning of the alphabet if necessary (i.e., if the shifted ASCII code is less than the ASCII code for 'a').\n    6. Convert the shifted ASCII code back into a character using the `chr()` function.\n    7. Append the shifted character to the `decoded` string.\n    8. Return the decoded string.\n    \"\"\"\n    decoded = \"\"\n    for ch in s:\n        ascii_code = ord(ch) - 5\n        if ascii_code < ord(\"a\"):\n            ascii_code += 26\n        decoded += chr(ascii_code)\n    return decoded"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    result = \"\"\n    for char in text:\n        if char not in \"aeiou\":\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    result = True\n    for element in l:\n        if element >= t:\n            result = False\n            break\n    return result"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert both strings to lowercase\n    s0 = s0.lower()\n    s1 = s1.lower()\n\n    # Create a set to store the unique characters of the first string\n    chars = set()\n\n    # Iterate through each character in the first string and add it to the set if it's not already present\n    for char in s0:\n        if char not in chars:\n            chars.add(char)\n\n    # Check if the second string contains all the characters in the set\n    return chars.issubset(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    1. Define the function `fib` with one parameter `n`, which is an integer.\n    2. Check if `n` is less than or equal to 0. If it is, return 0.\n    3. Initialize two variables `a` and `b` to 0 and 1, respectively. These will be used to store the previous two Fibonacci numbers.\n    4. Loop from 2 to `n`:\n    5. Return the final value of `b`, which will be the `n`-th Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    a, b = 0, 1\n    for i in range(2, n+1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Given a string of brackets, return whether or not they are properly balanced.\n    \"\"\"\n    # Initialize a stack to keep track of the opening brackets\n    stack = []\n\n    # Iterate through each character in the input string\n    for char in brackets:\n        # If the current character is an opening bracket, push it onto the stack\n        if char == \"<\":\n            stack.append(char)\n        # If the current character is a closing bracket, pop the top element from the stack\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    # After iterating through the entire input string, if the stack is not empty, return False\n    if stack:\n        return False\n    \n    # Otherwise, return True\n    return True"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    if len(l) < 2:\n        return True\n    increasing = False\n    decreasing = False\n    for i in range(1, len(l)):\n        if l[i] >= l[i-1]:\n            increasing = True\n        else:\n            decreasing = True\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    result = set()\n    for elem in l1:\n        if elem in l2:\n            result.add(elem)\n    for elem in l2:\n        if elem in l1:\n            result.add(elem)\n    return sorted(list(result))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    max_factor = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            max_factor = i\n    return max_factor"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Given a string of brackets, returns True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    1. Define a new list to store the coefficients of the derivative polynomial.\n    2. Iterate over the input list `xs`, starting from the second element (index 1).\n    3. For each element, multiply it by its index and add it to the corresponding element in the output list.\n    4. Return the output list.\n    \"\"\"\n    result = [0] * len(xs)\n    for i in range(1, len(xs)):\n        result[i-1] = xs[i] * i\n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"N must be non-negative\")\n\n    if n <= 2:\n        return 0\n\n    a, b, c = 0, 0, 1\n    for i in range(3, n+1):\n        a, b, c = b, c, a + b + c\n\n    return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(word):\n    vowel_count = 0\n    for char in word:\n        if char in 'aeiou':\n            vowel_count += 1\n        elif char == 'y':\n            if word[-2] not in 'aeiou':\n                vowel_count += 1\n    return vowel_count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    x_len = len(x_str)\n    if shift > x_len:\n        return \"\".join(reversed(x_str))\n    else:\n        return x_str[x_len-shift:] + x_str[:x_len-shift]"}
{"task_id": "HumanEval/66", "completion": "def digit_sum(s):\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples, oranges = map(int, s.split())\n    mangoes = n - apples - oranges\n    return max(mangoes, 0)"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    # Check if the input array is empty\n    if not arr:\n        return []\n    # Filter out odd values and find the smallest even value\n    smallest_even = next((x for x in arr if x % 2 == 0), None)\n    # If there are no even values, return an empty list\n    if smallest_even is None:\n        return []\n    # Find the index of the smallest even value\n    smallest_index = arr.index(smallest_even)\n    # Return the smallest even value and its index\n    return [smallest_even, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    lst.sort(reverse=True)\n    frequency = {}\n    for i in lst:\n        if i not in frequency:\n            frequency[i] = 1\n        else:\n            frequency[i] += 1\n    for i in lst:\n        if frequency[i] >= i:\n            return i\n    return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(my_list):\n    if not my_list:\n        return []\n    result = []\n    while my_list:\n        min_value = min(my_list)\n        max_value = max(my_list)\n        result.extend([min_value, max_value])\n        my_list.remove(min_value)\n        my_list.remove(max_value)\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b < c or a + c < b or b + c < a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if the input list q is a palindromic list\n    if q != q[::-1]:\n        return False\n    # Calculate the sum of the elements in the list q\n    sum = 0\n    for i in q:\n        sum += i\n    # Compare the sum to the maximum possible weight w\n    if sum >= w:\n        return False\n    # Return True if the input list q is balanced and the sum of its elements is less than or equal to the maximum possible weight w\n    return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    min_changes = 0\n    if len(arr) <= 1:\n        return min_changes\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    return min_changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars1 = 0\n    for s in lst1:\n        total_chars1 += len(s)\n    total_chars2 = 0\n    for s in lst2:\n        total_chars2 += len(s)\n    if total_chars1 <= total_chars2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a > 100:\n        return False\n    prime1 = 0\n    prime2 = 0\n    prime3 = 0\n    for i in range(2, int(a**0.5) + 1):\n        if is_prime(i):\n            prime1 = i\n            break\n    for j in range(2, int((a/prime1)**0.5) + 1):\n        if is_prime(j):\n            prime2 = j\n            break\n    prime3 = (a/prime1)/prime2\n    if prime3 % 1 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n**int(n)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0 or a == 1:\n        return True\n    for n in range(2, int(a**0.5) + 1):\n        if a == n**3:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_hex_digits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    num = num.upper()\n    char_list = num.split()\n    count = 0\n    for char in char_list:\n        if char in prime_hex_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    count = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            count = 0\n    return count >= 3"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    gpa_to_letter_grade = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-', 0.0: 'E'}\n    letter_grades = []\n    for gpa in grades:\n        for grade in gpa_to_letter_grade:\n            if gpa >= grade:\n                letter_grades.append(gpa_to_letter_grade[grade])\n                break\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) == 2 or len(string) == 3:\n        return True\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for digit in str(n):\n        if digit == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # Convert the input integer N to its binary representation\n    binary_representation = bin(N)\n    \n    # Initialize a variable to store the sum\n    sum = 0\n    \n    # Loop through each digit of the binary representation\n    for digit in binary_representation:\n        # Convert the current digit to an integer\n        digit_int = int(digit)\n        \n        # Add the current digit to the sum\n        sum += digit_int\n    \n    # Return the sum as a string\n    return str(sum)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    if not lst:\n        return \"List must be non-empty\"\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 1 and x % 2 == 0:\n            result += x\n    return result"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = []\n    for word in words:\n        sorted_word = \"\".join(sorted(word))\n        sorted_words.append(sorted_word)\n    return \" \".join(sorted_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \n    Example solution:\n    # iterate through each"}
{"task_id": "HumanEval/88", "completion": "def sort_array(arr):\n    if not arr:\n        return []\n    if sum(arr[0], arr[-1]) % 2 == 1:\n        return sorted(arr)\n    else:\n        return sorted(arr, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(string):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_string = ''\n    for char in string:\n        if char in alphabet:\n            encrypted_string += rotated_alphabet[alphabet.index(char)]\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    sorted_list = sorted(lst)\n    smallest = sorted_list[0]\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i] < smallest:\n            return sorted_list[i]\n    return None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(string):\n    count = 0\n    sentences = string.split(\".\")\n    for sentence in sentences:\n        words = sentence.split()\n        if words[0] == \"I\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if not all(isinstance(n, int) for n in [x, y, z]):\n        return False\n    sum = x + y\n    if z == sum or z == abs(sum):\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char in \"aeiouAEIOU\":\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def largest_prime_sum(lst):\n    # find the largest prime number in the list\n    largest_prime = None\n    for i in lst:\n        if is_prime(i) and (largest_prime is None or i > largest_prime):\n            largest_prime = i\n\n    # return the sum of its digits\n    if largest_prime is not None:\n        return sum(int(digit) for digit in str(largest_prime))\n    else:\n        return 0\n\ndef is_prime(n):\n    # check if n is a prime number\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(my_dict):\n    if not my_dict:\n        return False\n\n    lower_case = True\n    upper_case = True\n\n    for key in my_dict:\n        if not isinstance(key, str):\n            return False\n\n        if key.islower():\n            upper_case = False\n        elif key.isupper():\n            lower_case = False\n        else:\n            return False\n\n    if lower_case:\n        return True\n    elif upper_case:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"\n    Returns an array of the first n prime numbers that are less than n\n    \"\"\"\n    prime_numbers = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\n\ndef is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i, char in enumerate(s):\n        if char.isupper() and i % 2 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    value = float(value)\n    rounded = round(value)\n    if rounded == value:\n        return int(rounded)\n    elif abs(rounded - value) > 0.5:\n        return int(round(value))\n    else:\n        return int(value)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n <= 0:\n        return \"Error: n must be a positive integer.\"\n    stones = [n]\n    current_level = 1\n    while current_level < n:\n        if current_level % 2 == 1:\n            stones.append(current_level + 1)\n        else:\n            stones.append(current_level + 2)\n        current_level += 1\n    return stones"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(\", \")"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x <= 0 or y <= 0:\n        return -1\n    for i in range(min(x, y), max(x, y) + 1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / (m - n + 1)\n    rounded_avg = round(avg)\n    binary_rep = bin(rounded_avg)\n    return binary_rep"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(my_list):\n    unique_elements = []\n    for num in my_list:\n        if all(int(digit) % 2 for digit in str(num)):\n            unique_elements.append(num)\n    return sorted(unique_elements)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    numbers = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in arr:\n        if num >= 1 and num <= 9:\n            result.append(numbers[num - 1])\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            total = 0\n            for j in range(1, i+1):\n                total += j\n            result.append(total)\n    return result\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for element in arr:\n        sum = abs(element) + (element < 0)\n        if sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    else:\n        arr.sort()\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return False\n        return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    if not any(x % 2 == 0 for x in lst2):\n        return \"NO\"\n    while not all(x % 2 == 0 for x in lst1):\n        for i in range(len(lst1)):\n            if lst1[i] % 2 != 0:\n                for j in range(len(lst2)):\n                    if lst2[j] % 2 == 0:\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n                        break\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(string):\n    # Initialize an empty dictionary to store the letter counts\n    letter_counts = {}\n    \n    # Split the input string into individual letters using the space character as the delimiter\n    letters = string.split(' ')\n    \n    # Iterate over each letter and increment its count in the dictionary if it already exists, or set its count to 1 if it doesn't exist\n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    \n    # Find the maximum occurrence of any letter by iterating over the dictionary values and keeping track of the highest value seen so far\n    max_occurrence = 0\n    for count in letter_counts.values():\n        if count > max_occurrence:\n            max_occurrence = count\n    \n    # If there are multiple letters with the same maximum occurrence, add them all to a list\n    letters_with_max_occurrence = []\n    for letter, count in letter_counts.items():\n        if count == max_occurrence:\n            letters_with_max_occurrence.append(letter)\n    \n    return letters_with_max_occurrence\n[/PY"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(my_list):\n    result = []\n    for s in my_list:\n        count = 0\n        for c in s:\n            if int(c) % 2 == 1:\n                count += 1\n        result.append(count)\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = 0\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n            min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    num_lowerings = 0\n    for row in grid:\n        for col in range(len(row)):\n            if row[col] == 1:\n                num_lowerings += min(capacity, row[col])\n                row[col] -= min(capacity, row[col])\n    return num_lowerings"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    sorted_list = []\n    binary_list = []\n    for num in arr:\n        binary_list.append(bin(num))\n    sorted_binary_list = sorted(binary_list, key=lambda x: x.count('1'))\n    for binary_str in sorted_binary_list:\n        sorted_list.append(int(binary_str, 2))\n    return sorted_list"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    selected_words = []\n    for word in words:\n        if len([c for c in word if c.islower()]) == n:\n            selected_words.append(word)\n    return selected_words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            if i != len(word)-1 and i != 0:\n                return word[i]\n        elif word[i] in consonants:\n            continue\n        else:\n            return \"\"\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(string1, string2):\n    # Initialize a variable to keep track of the number of open parentheses\n    open_parens = 0\n    \n    # Loop through each character in the first string\n    for char in string1:\n        # If we encounter an open parenthesis, increase the count\n        if char == '(':\n            open_parens += 1\n        # If we encounter a close parenthesis, decrease the count\n        elif char == ')':\n            open_parens -= 1\n        # If the count is ever negative, return False\n        if open_parens < 0:\n            return False\n    \n    # Loop through each character in the second string\n    for char in string2:\n        # If we encounter an open parenthesis, increase the count\n        if char == '(':\n            open_parens += 1\n        # If we encounter a close parenthesis, decrease the count\n        elif char == ')':\n            open_parens -= 1\n        # If the count is ever negative, return False\n        if open_parens < 0:\n            return False\n    \n    # If the count is zero after looping through both strings, return True\n    if open_parens == 0:\n        return True"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(my_list):\n    sum = 0\n    for i in range(len(my_list)):\n        if i % 2 == 0:\n            sum += my_list[i]\n    return sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    1. Define a function called `get_odd_collatz` that takes a positive integer `n` as input and returns a sorted list of odd numbers from the Collatz sequence starting at `n`.\n    2. Initialize an empty list"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date_string):\n    \"\"\"\n    Returns True if the given date string is valid, and False otherwise.\n    \"\"\"\n    # Check if the date string is empty or not\n    if not date_string:\n        return False\n\n    # Split the date string into three parts: month, day, and year\n    month, day, year = date_string.split('-')\n\n    # Check if the month is between 1 and 12 (inclusive)\n    if not 1 <= int(month) <= 12:\n        return False\n\n    # Check if the day is between 1 and the number of days in the given month\n    if not 1 <= int(day) <= days_in_month(int(month), int(year)):\n        return False\n\n    # Check if the year is valid (i.e. non-negative)\n    if int(year) < 0:\n        return False\n\n    # If all checks pass, return True\n    return True\n\ndef days_in_month(month, year):\n    \"\"\"\n    Returns the number of days in the given month.\n    \"\"\"\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if txt.isspace():\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 == 1:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(my_list):\n    if len(my_list) <= 1:\n        return True\n    prev = my_list[0]\n    curr = my_list[1]\n    for i in range(2, len(my_list)):\n        if my_list[i] <= curr:\n            return False\n        prev = curr\n        curr = my_list[i]\n    return curr > prev"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length == 1:\n        return \"YES\"\n    else:\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 0\n    sum = 0\n    for num in arr:\n        if num > 0:\n            product += 1\n        elif num < 0:\n            product -= 1\n        sum += num * product\n    return sum"}
{"task_id": "HumanEval/129", "completion": "def min_path(grid, k):\n    # Initialize the minimum path sum\n    min_sum = float('inf')\n    # Initialize the current sum\n    current_sum = 0\n    # Initialize the queue for BFS\n    queue = []\n    # Add the first cell to the queue\n    queue.append((0, 0))\n    # Loop until the queue is empty\n    while queue:\n        # Get the current cell from the queue\n        row, col = queue.pop(0)\n        # Increase the current sum by the value of the current cell\n        current_sum += grid[row][col]\n        # If the current sum is less than the minimum sum, update the minimum sum\n        if current_sum < min_sum:\n            min_sum = current_sum\n        # If the current cell is the last cell, return the minimum sum\n        if row == len(grid) - 1 and col == len(grid[0]) - 1:\n            return min_sum\n        # Add the neighboring cells to the queue\n        for r, c in [(row, col+1), (row, col-1), (row+1, col), (row-1, col)]:\n            if 0 <= r < len(grid) and 0 <= c < len"}
{"task_id": "HumanEval/130", "completion": "def tribonacci_sequence(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        seq = [1, 3]\n        for i in range(n-2):\n            seq.append(seq[i] + seq[i+1] + seq[i+2])\n        return seq"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    result = 0\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            result *= int(digit)\n    return result"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    1. Check if the input string contains only square brackets. If it doesn't, return False.\n    2. Initialize two variables, `open_brackets` and `closed_brackets`, both set to 0.\n    3. Iterate through each character in the input string.\n    4. If the current character is an opening bracket (`[`), increment `open_brackets`.\n    5. If the current character is a closing bracket (`]`), decrement `open_brackets` and increment `closed_brackets`.\n    6. If `open_brackets` is ever negative, return"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    rounded_list = []\n    for num in lst:\n        rounded_list.append(math.ceil(num))\n    return sum([i**2 for i in rounded_list])"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    words = txt.split()\n    if words[-1] != last_char:\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if len(lst) < 2:\n        return (None, None)\n    largest_negative = None\n    smallest_positive = None\n    for elem in lst:\n        if elem < 0 and (largest_negative is None or elem > largest_negative):\n            largest_negative = elem\n        elif elem > 0 and (smallest_positive is None or elem < smallest_positive):\n            smallest_positive = elem\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    # Check if both inputs are of the same type (integer, float, or string)\n    if type(a) != type(b):\n        return \"Error: Input types do not match.\"\n    # Convert any string inputs to floats using the `float()` function\n    if isinstance(a, str):\n        try:\n            a = float(a)\n        except ValueError:\n            return \"Error: Invalid input.\"\n    if isinstance(b, str):\n        try:\n            b = float(b)\n        except ValueError:\n            return \"Error: Invalid input.\"\n    # Compare the two values and determine which one is larger\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    result = False\n    for i in range(2, n+1, 2):\n        for j in range(2, n+1, 2):\n            for k in range(2, n+1, 2):\n                for l in range(2, n+1, 2):\n                    if i + j + k + l == n:\n                        result = True\n                        break\n    return result"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    while n > 1:\n        result *= n\n        n -= 1\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    modified_text = \"\"\n    for c in text:\n        if c == \" \":\n            if text[text.index(c) + 1] == \" \":\n                modified_text += \"_\"\n            else:\n                modified_text += \"-\"\n        else:\n            modified_text += c\n    return modified_text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return \"No\"\n    if \".\" not in file_name:\n        return \"No\"\n    name, extension = file_name.split(\".\")\n    if not name[0].isalpha():\n        return \"No\"\n    if extension not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = []\n    for i, v in enumerate(lst):\n        if i % 3 == 0:\n            result.append(v**2)\n        elif i % 4 == 0:\n            result.append(v**3)\n        else:\n            result.append(v)\n    return sum(result)"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    result = []\n    for word in sentence.split():\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\nimport math\n\ndef simplify(x, n):\n    try:\n        x = Fraction(x)\n        n = Fraction(n)\n        product = x * n\n        gcd = math.gcd(product.numerator, product.denominator)\n        return gcd == 1\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(numbers):\n    digit_sums = {}\n    for i, num in enumerate(numbers):\n        digit_sums[i] = sum(int(digit) for digit in str(num))\n    return [numbers[i] for i in sorted(digit_sums, key=digit_sums.get)]"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num // 10 % 10 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = []\n    for i in range(1, n+1):\n        a.append(i*i - i + 1)\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def get_planets_between(planet1, planet2):\n    \"\"\"\n    Returns a list of all the planets between planet1 and planet2, sorted by their proximity to the sun.\n    \"\"\"\n    # Define a list of all the planets in our solar system, sorted by their proximity to the sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indices of planet1 and planet2 in the list of planets\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    \n    # Use the indices to extract all the planets between planet1 and planet2 from the list of planets\n    if idx1 < idx2:\n        return tuple(planets[idx1+1:idx2])\n    else:\n        return tuple(planets[idx2+1:idx1])"}
{"task_id": "HumanEval/149", "completion": "def list_sort(my_list):\n    # Check if the input list contains any strings with odd lengths and remove them from the list\n    my_list = [word for word in my_list if len(word) % 2 == 0]\n    # Sort the remaining strings in ascending order by length\n    my_list.sort(key=len)\n    # If two strings have the same length, sort them alphabetically\n    my_list.sort()\n    return my_list"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if len(lst) == 0:\n        return 0\n    sum = 0\n    for element in lst:\n        if element % 2 != 0 and isinstance(element, int) and element >= 0:\n            sum += element ** 2\n    return sum"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    results = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            results.append(0)\n        else:\n            results.append(abs(game[i] - guess[i]))\n    return results"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > strongest_extension:\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\" if strongest_extension else \"\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(word1, word2):\n    # Initialize variables\n    word2_len = len(word2)\n    word1_len = len(word1)\n    i = 0\n\n    # Check if word2 is a substring of word1\n    if word2 in word1:\n        return True\n\n    # Rotate word2 by one character and check if it's a substring of word1\n    while i < word2_len:\n        word2 = word2[1:] + word2[0]\n        if word2 in word1:\n            return True\n        i += 1\n\n    # If none of the rotations are substrings, return False\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    # Define a dictionary to map each digit of the input number to its corresponding Roman numeral symbol\n    roman_numerals = {\n        '1': 'I',\n        '2': 'II',\n        '3': 'III',\n        '4': 'IV',\n        '5': 'V',\n        '6': 'VI',\n        '7': 'VII',\n        '8': 'VIII',\n        '9': 'IX',\n        '10': 'X'\n    }\n\n    # Convert the input number to a string using the `str()` function\n    number_str = str(number)\n\n    # Iterate over each character in the string representation of the input number, and for each character, use the dictionary created in step 1 to obtain its corresponding Roman numeral symbol\n    roman_numeral = ''\n    for char in number_str:\n        roman_numeral += roman_numerals[char]\n\n    # Concatenate all the Roman numeral symbols obtained in step"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Calculate the lengths of the sides using the Pythagorean theorem\n    hypotenuse = (a**2 + b**2)**0.5\n    \n    # Check if the length of the hypotenuse is equal to the sum of the lengths of the other two sides\n    if hypotenuse == c:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > len(set(max_word)):\n            max_word = word\n        elif len(set(word)) == len(set(max_word)):\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if need > remaining:\n        return [number + need, 0]\n    else:\n        total = number + need\n        return [total, remaining - total]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    1. First, we need to check if the length of the operator list is equal to the length of the operand list minus one. If it's not, then we need to raise an error.\n    2. Next, we need to iterate through the"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return \"\".join(c.lower() if c.isupper() else c.upper() for c in s)"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n    byte_array = bytes(text, 'utf-8')\n    hash_object = hashlib.md5(byte_array)\n    return hash_object.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return sorted(even_digits)"}
