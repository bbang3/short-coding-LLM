{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string):\n    open_brace = 0\n    start_index = 0\n    result = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if open_brace == 0:\n                start_index = i\n            open_brace += 1\n        elif char == ')':\n            open_brace -= 1\n            if open_brace == 0:\n                result.append(paren_string[start_index:i+1])\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [x for pair in zip(numbers[::2], numbers[1::2]) for x in pair] + numbers[-1:]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def parse_parens(s: str) -> int:\n        level = 0\n        max_level = 0\n        for c in s:\n            if c == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif c == ')':\n                level -= 1\n        return max_level\n\n    return [parse_parens(s) for s in paren_string.split()]"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return sum, product"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n    \"\"\"\n    max_value = 0\n    result = []\n    for num in numbers:\n        if num > max_value:\n            max_value = num\n        result.append(max_value)\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string or len(string) == 1:\n        return string\n\n    # find the longest postfix of supplied string that is a palindrome\n    postfix_start = 0\n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[i:]):\n            postfix_start = i\n            break\n\n    # append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string + string[postfix_start:len(string) - 1][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return a list of all prefixes of the input string, from shortest to longest.\n\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n    \"\"\"\n    note_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [note_map[note] for note in music_string.split()]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string, substring):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    number_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    number_list = numbers.split()\n    sorted_numbers = sorted(number_list, key=lambda x: number_map[x])\n    return \" \".join(sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers):\n    closest_pair = (numbers[0], numbers[1])\n    smallest_diff = abs(closest_pair[0] - closest_pair[1])\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            pair = (numbers[i], numbers[j])\n            diff = abs(pair[0] - pair[1])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                closest_pair = pair\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers):\n    \"\"\"\n    Given a list of numbers, apply a linear transform to the list\n    such that the smallest number will become 0 and the largest will become 1.\n    \"\"\"\n    low = min(numbers)\n    high = max(numbers)\n    return [((x - low) / (high - low)) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(my_list):\n    return [x for x in my_list if type(x) == int]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n):\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(my_list, prefix):\n    return [s for s in my_list if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(my_list):\n    return [x for x in my_list if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    \"\"\"\n    Finds a zero of the polynomial defined by the given coefficients xs.\n    The function returns only one zero, even if multiple zeros exist.\n    The function only takes lists xs with an even number of coefficients and the largest non-zero coefficient, which guarantees a solution.\n    \"\"\"\n    # Implement the find_zero function here\n    return 0"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    return [val if i % 3 else sorted(val) for i, val in enumerate(l)]"}
{"task_id": "HumanEval/34", "completion": "def unique(my_list):\n    return sorted(set(my_list))"}
{"task_id": "HumanEval/35", "completion": "def max_element(my_list):\n    return max(my_list)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    l_sorted = sorted(l[1::2])\n    return [l_sorted[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the n-th number that is both a Fibonacci number and a prime number.\n    \"\"\"\n    fib_seq = []\n    curr_fib = 1\n    next_fib = 1\n    for i in range(n):\n        if is_prime(curr_fib):\n            fib_seq.append(curr_fib)\n        curr_fib, next_fib = next_fib, curr_fib + next_fib\n    return fib_seq[n - 1]\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(my_list):\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)):\n            for k in range(j+1, len(my_list)):\n                if my_list[i] + my_list[j] + my_list[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Calculate the number of collisions\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            elif i < j:\n                collisions += 1\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(my_list):\n    return [x + 1 for x in my_list]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(my_list):\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)):\n            if my_list[i] + my_list[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    return bin(x)[2:].zfill(base)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    if n <= 3:\n        return 0\n    elif n == 4:\n        return 2\n    \n    # Initialize the first four elements of the sequence\n    a, b, c, d = 0, 0, 2, 0\n    \n    for i in range(5, n+1):\n        # Compute the next element in the sequence using the previous four elements\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l = sorted(l)\n    if len(sorted_l) % 2 == 0:\n        return (sorted_l[len(sorted_l) // 2 - 1] + sorted_l[len(sorted_l) // 2]) / 2\n    else:\n        return sorted_l[len(sorted_l) // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n\n    :param text: The string to check\n    :return: True if the string is a palindrome, False otherwise\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n, p):\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join([char for char in text if char.lower() not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(my_list, threshold):\n    return all(element < threshold for element in my_list)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(word1, word2):\n    return sorted(word1) == sorted(word2)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Returns True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    return all(l[i] >= l[i-1] for i in range(1, len(l))) or all(l[i] <= l[i-1] for i in range(1, len(l)))"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    return sorted(set(l1).intersection(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    if n <= 1:\n        return n\n    for i in range(int(n**0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Returns True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    if len(xs) == 1:\n        return [0]\n    else:\n        return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n <= 2:\n        return 0\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in word:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digit_sum(s):\n    return sum([ord(c) for c in s if c.isupper()])"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apple, orange = map(int, s.split())\n    return n - apple - orange"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even_value = min(even_values)\n    smallest_even_index = arr.index(smallest_even_value)\n    return [smallest_even_value, smallest_even_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    # create a dictionary to store the count of each integer\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # find the maximum integer that satisfies the condition\n    max_int = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num and num > max_int:\n            max_int = num\n\n    return max_int"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        current_min = min(lst)\n        current_max = max(lst)\n        sorted_list.extend([current_min, current_max])\n        lst.remove(current_min)\n        lst.remove(current_max)\n    return sorted_list"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        area = (a * b * c) / 2\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # find the midpoint of the array\n    mid = len(arr) // 2\n    # initialize a variable to keep track of the number of changes\n    changes = 0\n    # loop through the first half of the array\n    for i in range(mid):\n        # check if the element at index i is not equal to the element at index len-i-1\n        if arr[i] != arr[len-i-1]:\n            # increment the changes variable\n            changes += 1\n            # set the element at index i to be equal to the element at index len-i-1\n            arr[i] = arr[len-i-1]\n    # return the number of changes\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(list1, list2):\n    total_chars1 = sum(len(s) for s in list1)\n    total_chars2 = sum(len(s) for s in list2)\n    if total_chars1 < total_chars2:\n        return list1\n    elif total_chars1 > total_chars2:\n        return list2\n    else:\n        return list1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 1:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0 and is_prime(i) and is_prime(a//i):\n            return True\n    return False\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n ** int(x / n)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a**(1/3).is_integer()"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_digits = set([2, 3, 5, 7, 11, 13, 17, 19])\n    num = num.upper()\n    count = 0\n    for char in num:\n        if char in 'ABCDEF' and int(char, 16) in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal != 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return [['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'][min(12, max(0, (int(grade - 3) / 2)))] for grade in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = \"\".join(sorted(word))\n        ordered_words.append(ordered_word)\n    return \" \".join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    return sorted(coordinates, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(arr):\n    if sum(arr[0], arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    table = str.maketrans(alphabet, new_alphabet)\n    return s.translate(table)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(my_list):\n    if len(my_list) < 2:\n        return None\n    sorted_list = sorted(my_list)\n    smallest = sorted_list[0]\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i] != smallest:\n            return sorted_list[i]\n    return None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(string):\n    count = 0\n    for sentence in string.split('.')[:-1]:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded += char.upper()\n            else:\n                encoded += char.lower()\n        else:\n            encoded += char\n    \n    for i, char in enumerate(encoded):\n        if char in vowels:\n            encoded = encoded[:i] + chr(ord(char) + 2) + encoded[i+1:]\n    \n    return encoded"}
{"task_id": "HumanEval/94", "completion": "def get_largest_prime_sum(my_list):\n    # find the largest prime number in the list\n    largest_prime = None\n    for i in my_list:\n        if is_prime(i) and (largest_prime is None or i > largest_prime):\n            largest_prime = i\n\n    # return the sum of its digits\n    if largest_prime is not None:\n        return sum(int(digit) for digit in str(largest_prime))\n    else:\n        return 0\n\ndef is_prime(n):\n    # check if n is a prime number\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(my_dict):\n    if not my_dict:\n        return False\n    first_key = list(my_dict.keys())[0]\n    return all(key.islower() or key.isupper() for key in my_dict.keys())"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    prime_numbers = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(i)\n    return prime_numbers"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return int(str(a)[-1]) * int(str(b)[-1])"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c.isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    return round(float(value))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (n + 1) // 2\n        stones.append(n)\n    return stones[::-1]"}
{"task_id": "HumanEval/101", "completion": "def words_string(my_string):\n    return my_string.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # find the biggest even number in the range [x, y] inclusive\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    average = int(sum / (m-n+1))\n    binary_string = bin(average)[2:]\n    return \"0b\" + binary_string"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if not any(int(digit) % 2 == 0 for digit in str(i)):\n            result.append(i)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    arr.sort()\n    arr.reverse()\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            result.append(sum)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n        if len(arr) == 0:\n            return True\n        else:\n            arr.sort()\n            for i in range(len(arr)-1):\n                if arr[i] > arr[i+1]:\n                    return False\n            return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Check if all elements in lst1 are even\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    # Check if there are any even numbers in lst2\n    elif any(x % 2 == 0 for x in lst2):\n        return \"NO\"\n    # Check if it is possible to exchange elements between lst1 and lst2 to make all elements of lst1 even\n    else:\n        # Sort both lists\n        lst1.sort()\n        lst2.sort()\n        # Initialize variables to keep track of the current index in both lists\n        i = 0\n        j = 0\n        # Loop through both lists and check if it is possible to exchange elements to make all elements of lst1 even\n        while i < len(lst1) and j < len(lst2):\n            if lst1[i] % 2 == 0 and lst2[j] % 2 != 0:\n                # If the current element in lst1 is even and the current element in lst2 is odd, exchange elements\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                i += 1\n                j += 1\n            elif lst1[i] % 2 != 0 and lst2[j] % 2 == 0:\n                # If the current element in lst1 is odd and the current element in lst2 is even, exchange elements\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                i += 1\n                j += 1\n            else:\n                # If the current elements in both lists are not compatible for exchange, move on to the next element in lst1\n                i += 1\n        # After looping through both lists, check if all elements of lst1 are even\n        if all(x % 2 == 0 for x in lst1):\n            return \"YES\"\n        else:\n            return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(string):\n    letters = string.split()\n    counts = {}\n    for letter in letters:\n        if letter not in counts:\n            counts[letter] = 1\n        else:\n            counts[letter] += 1\n    return counts"}
{"task_id": "HumanEval/112", "completion": "<b>def reverse_delete(s, c):</b>\n    <b>result = \"\"</b>\n    <b>for char in s:</b>\n        <b>if char not in c:</b>\n            <b>result += char</b>\n    <b>return (result, result == result[::-1])</b>"}
{"task_id": "HumanEval/113", "completion": "def odd_count(my_list):\n    return [\"the number of odd elements {} in the string {} of the input.\".format(str(len([x for x in s if int(x) % 2 == 1])), i) for i, s in enumerate(my_list)]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # initialize a variable to store the minimum sum\n    min_sum = float('inf')\n    # loop through the array and calculate the sum of each sub-array\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_array_sum = sum(nums[i:j+1])\n            min_sum = min(min_sum, sub_array_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    water = 0\n    buckets = 0\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                water += 1\n                if water == capacity:\n                    buckets += 1\n                    water = 0\n\n    if water > 0:\n        buckets += 1\n\n    return buckets"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(word) == n]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    open_count = 0\n    for char in lst:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n        if open_count < 0:\n            return 'No'\n    return 'Yes' if open_count == 0 else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # sort the array in ascending order\n    arr.sort()\n    # initialize the sum to 0\n    sum = 0\n    # loop through the first k elements of the array\n    for i in range(k):\n        # extract the digit from the current element\n        digit = arr[i] // 10\n        # check if the digit is less than or equal to 2\n        if digit <= 2:\n            # add the current element to the sum\n            sum += arr[i]\n    # return the sum\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n <= 0:\n        raise ValueError(\"n should be a positive integer.\")\n    \n    collatz_list = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        collatz_list.append(n)\n    \n    return sorted([x for x in collatz_list if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid, otherwise False.\n\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n    if not date:\n        return False\n    match = re.match(r'^(\\d{2})-(\\d{2})-(\\d{4})$', date)\n    if not match:\n        return False\n    month, day, year = map(int, match.groups())\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day == 31:\n        return False\n    if month == 2 and (day < 1 or day > 29):\n        return False\n    if year % 4 == 0 and month == 2 and day == 30:\n        return False\n    return True\n```"}
{"task_id": "HumanEval/125", "completion": "<b>def split_words(txt):</b>\n    <b>if ' ' in txt:</b>\n        <b>return txt.split()</b>\n    <b>elif ',' in txt:</b>\n        <b>return txt.split(',')</b>\n    <b>else:</b>\n        <b>result = 0</b>\n        <b>for char in txt:</b>\n            <b>if ord(char) % 2 == 1:</b>\n                <b>result += 1</b>\n        <b>return result</b>"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(my_list):\n    if len(my_list) == 1:\n        return True\n    else:\n        for i in range(len(my_list) - 1):\n            if my_list[i] > my_list[i + 1]:\n                return False\n            elif my_list[i] == my_list[i + 1]:\n                if my_list.count(my_list[i]) > 1:\n                    return False\n        return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length > 1 and all(length % i != 0 for i in range(2, int(length ** 0.5) + 1)):\n        return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    mult = 1\n    for num in arr:\n        if num < 0:\n            mult *= -1\n    return sum(abs(num) * mult for num in arr)"}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef min_path(grid, k):\n    # Initialize the heap with the first element of each row\n    heap = [(grid[0][0], 0, 0)]\n    # Initialize the visited matrix with False\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    # Initialize the result list\n    result = []\n\n    while len(heap) > 0:\n        # Pop the smallest element from the heap\n        value, row, col = heapq.heappop(heap)\n        # If the current position is not visited and the path length is less than k\n        if not visited[row][col] and len(result) < k:\n            # Add the current value to the result list\n            result.append(value)\n            # Mark the current position as visited\n            visited[row][col] = True\n            # Loop through the neighbors of the current position\n            for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n                # If the neighbor is within the grid and not visited\n                if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and not visited[r][c]:\n                    # Add the neighbor to the heap\n                    heapq.heappush(heap, (grid[r][c], r, c))\n\n    return result\n\ndef main():\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 3\n    print(min_path(grid, k))\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/130", "completion": "def tribonacci_sequence(n):\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        seq = [1, 3]\n        for i in range(2, n):\n            seq.append(seq[i-1] + seq[i-2] + seq[i+1])\n        return seq"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    while n > 0:\n        if n % 2 == 1:\n            product *= n % 10\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) != 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(int(x)**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha() and last_char not in \"abcdefghijklmnopqrstuvwxyz\""}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest = None\n    smallest = None\n    for num in lst:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n        elif num > 0 and (smallest is None or num < smallest):\n            smallest = num\n    return (largest, smallest)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) is str:\n        a = float(a.replace(\",\", \".\"))\n    if type(b) is str:\n        b = float(b.replace(\",\", \".\"))\n    if a == b:\n        return None\n    return a if a > b else b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and any(n == i + j + k + l for i in range(2, int(n**0.5) + 1, 2) for j in range(2, int(n**0.5) + 1, 2) for k in range(2, int(n**0.5) + 1, 2) for l in range(2, int(n**0.5) + 1, 2))"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    if len(file_name.split('.')[0]) == 0:\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x * x\n        elif i % 4 == 0:\n            result += x * x * x\n        else:\n            result += x\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return \" \".join(prime_words)\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split(\"/\"))\n    n_num, n_denom = map(int, n.split(\"/\"))\n    return (x_num * n_num) % (x_denom * n_denom) == 0"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), x))"}
{"task_id": "HumanEval/146", "completion": "def special_filter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 100 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n        a = [i * i - i + 1 for i in range(1, n + 1)]\n        count = 0\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                for k in range(j + 1, len(a)):\n                    if a[i] + a[j] + a[k] % 3 == 0:\n                        count += 1\n        return count\n\n    n = 5\n    print(get_max_triples(n))"}
{"task_id": "HumanEval/148", "completion": "def between_planets(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])\n\ndef test_between_planets():\n    assert between_planets(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")\n    assert between_planets(\"Earth\", \"Mercury\") == (\"Venus\")\n    assert between_planets(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def list_sort(my_list):\n    return sorted(my_list, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if num % 2 != 0 and num > 0 and num == int(num):\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(scores, guesses):\n    return [abs(score - guess) for score, guess in zip(scores, guesses)]"}
{"task_id": "HumanEval/153", "completion": "def strongest_extension(class_name, extensions):\n    max_strength = None\n    strongest_extension = None\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if max_strength is None or strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(word1, word2):\n    return any(word2 in word1[i:] for i in range(len(word1)))"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(n):\n    even = 0\n    odd = 0\n    while n:\n        if n % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        n //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = str(number)\n    roman = ''\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    for i in range(len(values)):\n        while num[0] == '1':\n            roman += numerals[i]\n            num = num[1:]\n        if num[0] == '0':\n            num = num[1:]\n    return roman"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (c**2 + a**2 == b**2)"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    if not words:\n        return None\n    max_word = words[0]\n    for word in words:\n        if len(set(word)) > len(set(max_word)):\n            max_word = word\n        elif len(set(word)) == len(set(max_word)):\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total = number + need\n    if total > remaining:\n        return [remaining, 0]\n    else:\n        return [total, remaining - total]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        op = operator[i]\n        if op == '+':\n            result += operand[i+1]\n        elif op == '-':\n            result -= operand[i+1]\n        elif op == '*':\n            result *= operand[i+1]\n        elif op == '//':\n            result //= operand[i+1]\n        elif op == '**':\n            result **= operand[i+1]\n        else:\n            raise ValueError(\"Invalid operator\")\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    res = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                res += c.upper()\n            else:\n                res += c.lower()\n        else:\n            res += c\n    if not res:\n        return s[::-1]\n    return res"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits"}
