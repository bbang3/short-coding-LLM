{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    return any(abs(a - b) <= threshold for a, b in zip(numbers, numbers[1:]))"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string):\n    return re.findall(r'\\(.*?\\)', paren_string)"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number % 1"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    return any(operation < 0 for operation in operations)"}
{"task_id": "HumanEval/4", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [x for pair in zip(numbers[::2], numbers[1::2]) for x in pair] + numbers[-1:]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    def get_max_level(s: str) -> int:\n        level = 0\n        max_level = 0\n        for c in s:\n            if c == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif c == ')':\n                level -= 1\n        return max_level\n    return [get_max_level(s) for s in paren_string.split()]"}
{"task_id": "HumanEval/7", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/8", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    return list(accumulate(numbers, max))"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string or len(string) == 1:\n        return string\n\n    # find the longest postfix of supplied string that is a palindrome\n    postfix_start = 0\n    for i in range(len(string) - 1, 0, -1):\n        if string[i:] == string[i::-1]:\n            postfix_start = i\n            break\n\n    # append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string + string[postfix_start:len(string) - 1][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    return max(strings, key=len) if strings else None"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    return a if not b else greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return list(string[:i+1] for i in range(len(string)))"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, range(1, n+1)))"}
{"task_id": "HumanEval/16", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[note] for note in music_string.split()]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string, substring):\n    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    number_list = numbers.split()\n    sorted_numbers = sorted(number_list, key=lambda x: int(x))\n    return \" \".join(sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers):\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    smallest_diff = abs(closest_pair[0] - closest_pair[1])\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            pair = (numbers[i], numbers[j])\n            diff = abs(pair[0] - pair[1])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                closest_pair = pair\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers):\n    \"\"\"\n    Given a list of numbers, apply a linear transform to the list\n    such that the smallest number will become 0 and the largest will become 1.\n    \"\"\"\n    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/23", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n):\n    return next(i for i in range(n, 0, -1) if n % i == 0)"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/27", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/30", "completion": "def get_positive(my_list):\n    return list(filter(lambda x: x > 0, my_list))"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    \"\"\"\n    Finds a zero of the polynomial defined by the given coefficients xs.\n    The function returns only one zero, even if multiple zeros exist.\n    The function only takes lists xs with an even number of coefficients and the largest non-zero coefficient, which guarantees a solution.\n    \"\"\"\n    # Implement the find_zero function here\n    return 0"}
{"task_id": "HumanEval/33", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/34", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/35", "completion": "def max_element(my_list):\n    return max(my_list)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    return [x for i, x in enumerate(l) if i % 2 == 0 or x not in l[1::2]]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s):\n    # split string into groups of length 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group unless it has fewer than 3 elements\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    fib_seq = [1, 2]\n    for i in range(2, n):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return next(x for x in fib_seq if is_prime(x))"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(my_list):\n    for i, x in enumerate(my_list):\n        for j, y in enumerate(my_list[i+1:]):\n            if -x-y in my_list[j+1:]:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Calculate the number of collisions\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(my_list):\n    return any(my_list[i] + my_list[j] == 0 for i in range(len(my_list)) for j in range(i+1, len(my_list)))"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    return f\"{x:(base)}\""}
{"task_id": "HumanEval/45", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    if n <= 3:\n        return 0\n    elif n == 4:\n        return 2\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(5, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sorted(l)[len(l) // 2] if len(l) % 2 else (sorted(l)[len(l) // 2 - 1] + sorted(l)[len(l) // 2]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in \"aeiou\"])"}
{"task_id": "HumanEval/52", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/53", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/54", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Returns True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    return all(l[i] >= l[i-1] for i in range(1, len(l))) or all(l[i] <= l[i-1] for i in range(1, len(l)))"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    if n <= 1:\n        return n\n    for i in range(int(n**0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/60", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Returns True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/63", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(word):\n    return sum(map(str.lower, word).count(v) for v in 'aeiou')"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apple, orange = map(int, s.split())\n    return n - (apple + orange)"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even_value = min(even_values)\n    smallest_even_index = arr.index(smallest_even_value)\n    return [smallest_even_value, smallest_even_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    # create a dictionary to store the count of each integer\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # find the maximum integer that satisfies the condition\n    max_int = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num and num > max_int:\n            max_int = num\n\n    return max_int"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: (x % 2, x))"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        area = (a * b * c) / 2\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) % 2 == w % 2"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    mid = len(arr) // 2\n    changes = 0\n    for i in range(mid):\n        if arr[i] != arr[len-i-1]:\n            changes += 1\n            arr[i] = arr[len-i-1]\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 1:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0 and is_prime(i) and is_prime(a//i):\n            return True\n    return False\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/77", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    return sum(int(char, 16) in set([2, 3, 5, 7, 11, 13, 17, 19]) for char in num.upper())"}
{"task_id": "HumanEval/79", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] for i in range(len(s) - 2))"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return ['E', 'D-', 'D', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'][min(12, max(0, (int(grade - 3) / 2)))] for grade in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    return len(string) in {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    return len(str(10**(n-1))) + len(str(10**n-1))"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 and not x % 2)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return \" \".join(sorted(s.split()))"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (x[0]+x[-1])%2)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    table = str.maketrans(alphabet, new_alphabet)\n    return s.translate(table)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(my_list):\n    return min(filter(lambda x: x != my_list[0], my_list), default=None)"}
{"task_id": "HumanEval/91", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/92", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded = ''\n    for char in message:\n        if char.isalpha():\n            encoded += chr(ord(char) + 1) if char.islower() else chr(ord(char) - 1)\n        else:\n            encoded += char\n    \n    for i, char in enumerate(encoded):\n        if char in vowels:\n            encoded = encoded[:i] + chr(ord(char) + 2) + encoded[i+1:]\n    \n    return encoded"}
{"task_id": "HumanEval/94", "completion": "def get_largest_prime_sum(my_list):\n    largest_prime = max(my_list, key=lambda x: x if is_prime(x) else 0)\n    return sum(int(digit) for digit in str(largest_prime)) if largest_prime else 0"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(my_dict):\n    if not my_dict:\n        return False\n    first_key = list(my_dict.keys())[0]\n    return all(key.islower() or key.isupper() for key in my_dict.keys())"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    return [x for x in range(2, n+1) if all(x % i != 0 for i in range(2, int(x**0.5) + 1))]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return a * b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(c.isupper() for i, c in enumerate(s) if i % 2 == 0)"}
{"task_id": "HumanEval/99", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    return list(range(n, 0, -1)) if n > 0 else []"}
{"task_id": "HumanEval/101", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # find the biggest even number in the range [x, y] inclusive\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    return f\"0b{bin((sum(range(n, m+1)) // (m-n+1))}[2:])\""}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    arr.sort(reverse=True)\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][len(arr)]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return [i * (i - 1) // 2 if i % 2 else sum(range(1, i + 1)) for i in range(1, n + 1)]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return len([num for num in arr if sum(map(int, str(num))) > 0])"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    return all(arr[i] == arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Check if all elements in lst1 are even\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    # Check if there are any even numbers in lst2\n    elif any(x % 2 == 0 for x in lst2):\n        return \"NO\"\n    # Check if it is possible to exchange elements between lst1 and lst2 to make all elements of lst1 even\n    else:\n        # Sort both lists\n        lst1.sort()\n        lst2.sort()\n        # Initialize variables to keep track of the current index in both lists\n        i = 0\n        j = 0\n        # Loop through both lists and check if it is possible to exchange elements to make all elements of lst1 even\n        while i < len(lst1) and j < len(lst2):\n            if lst1[i] % 2 == 0 and lst2[j] % 2 != 0:\n                # If the current element in lst1 is even and the current element in lst2 is odd, exchange elements\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                i += 1\n                j += 1\n            elif lst1[i] % 2 != 0 and lst2[j] % 2 == 0:\n                # If the current element in lst1 is odd and the current element in lst2 is even, exchange elements\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                i += 1\n                j += 1\n            else:\n                # If the current elements in both lists are not compatible for exchange, move on to the next element in lst1\n                i += 1\n        # After looping through both lists, check if all elements of lst1 are even\n        if all(x % 2 == 0 for x in lst1):\n            return \"YES\"\n        else:\n            return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(string):\n    return {letter: string.count(letter) for letter in set(string)}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    return (\"\".join(filter(lambda x: x not in c, s)), \"\".join(filter(lambda x: x not in c, s)) == \"\".join(filter(lambda x: x not in c, s))[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(my_list):\n    return [\"the number of odd elements {} in the string {} of the input.\".format(str(len([x for x in s if int(x) % 2 == 1])), i) for i, s in enumerate(my_list)]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    return min(sum(nums[i:j+1]) for i in range(len(nums)) for j in range(i, len(nums)))"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    water = 0\n    buckets = 0\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                water += 1\n                if water == capacity:\n                    buckets += 1\n                    water = 0\n\n    if water > 0:\n        buckets += 1\n\n    return buckets"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    return [word for word in s.split() if len(word) == n]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    return 'Yes' if len(lst) % 2 == 0 and all(c != ')' for c in lst) else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if not i % 2 and x % 2)"}
{"task_id": "HumanEval/122", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n <= 0:\n        raise ValueError(\"n should be a positive integer.\")\n    return sorted([x for x in [n, *[3*x+1 if x%2 else x//2 for x in range(1, n)]] if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    match = re.match(r'^(\\d{2})-(\\d{2})-(\\d{4})$', date)\n    if not match:\n        return False\n    month, day, year = map(int, match.groups())\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day == 31:\n        return False\n    if month == 2 and (day < 1 or day > 29):\n        return False\n    if year % 4 == 0 and month == 2 and day == 30:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt or ',' in txt:\n        return txt.split()\n    else:\n        result = 0\n        for char in txt:\n            if ord(char) % 2 == 1:\n                result += 1\n        return result"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(my_list):\n    return all(my_list[i] <= my_list[i + 1] for i in range(len(my_list) - 1))"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length > 1 and all(length % i != 0 for i in range(2, int(length ** 0.5) + 1)):\n        return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    return sum(num * (1 if num > 0 else -1) for num in arr)"}
{"task_id": "HumanEval/129", "completion": "def min_path(grid, k):\n    # Initialize the heap with the first element of each row\n    heap = [(grid[0][0], 0, 0)]\n    # Initialize the visited matrix with False\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    # Initialize the result list\n    result = []\n\n    while len(heap) > 0:\n        # Pop the smallest element from the heap\n        value, row, col = heapq.heappop(heap)\n        # If the current position is not visited and the path length is less than k\n        if not visited[row][col] and len(result) < k:\n            # Add the current value to the result list\n            result.append(value)\n            # Mark the current position as visited\n            visited[row][col] = True\n            # Loop through the neighbors of the current position\n            for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n                # If the neighbor is within the grid and not visited\n                if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and not visited[r][c]:\n                    # Add the neighbor to the heap\n                    heapq.heappush(heap, (grid[r][c], r, c))\n\n    return result"}
{"task_id": "HumanEval/130", "completion": "def tribonacci_sequence(n):\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        seq = [1, 3]\n        for i in range(2, n):\n            seq.append(seq[i-1] + seq[i-2] + seq[i+1])\n        return seq"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    return product(int(digit) for digit in str(n) if int(digit) % 2 == 1)"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) != 0"}
{"task_id": "HumanEval/133", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return txt.endswith(tuple(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) if txt else False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    return max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x > 0, lst))"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    try:\n        a = float(a.replace(\",\", \".\"))\n    except ValueError:\n        pass\n    try:\n        b = float(b.replace(\",\", \".\"))\n    except ValueError:\n        pass\n    if a == b:\n        return None\n    return a if a > b else b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and any(n == i + j + k + l for i in range(2, int(n**0.5) + 1, 2) for j in range(2, int(n**0.5) + 1, 2) for k in range(2, int(n**0.5) + 1, 2) for l in range(2, int(n**0.5) + 1, 2))"}
{"task_id": "HumanEval/139", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/140", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/141", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(x**(i%3+1) for i, x in enumerate(lst))"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split(\"/\"))\n    n_num, n_denom = map(int, n.split(\"/\"))\n    return (x_num * n_num) % (x_denom * n_denom) == 0"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))"}
{"task_id": "HumanEval/146", "completion": "def special_filter(nums):\n    return sum(1 for num in nums if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 100 in [1, 3, 5, 7, 9])"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(a[i] + a[j] + a[k] % 3 == 0 for i in range(len(a)) for j in range(i + 1, len(a)) for k in range(j + 1, len(a)))"}
{"task_id": "HumanEval/148", "completion": "def between_planets(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    return tuple(planets[index1+1:index2])"}
{"task_id": "HumanEval/149", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    return x if is_prime(n) else y\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0 and x == int(x))"}
{"task_id": "HumanEval/152", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/153", "completion": "def strongest_extension(class_name, extensions):\n    return max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(word1, word2):\n    return any(word2 in word1[i:] for i in range(len(word1)))"}
{"task_id": "HumanEval/155", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = str(number)\n    roman = ''\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    for i in range(len(values)):\n        while num[0] == '1':\n            roman += numerals[i]\n            num = num[1:]\n        if num[0] == '0':\n            num = num[1:]\n    return roman"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (c**2 + a**2 == b**2)"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    if not words:\n        return None\n    return max(words, key=lambda x: (len(set(x)), x))"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    return [min(remaining, number + need), max(0, remaining - (number + need))]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            result //= num\n        elif op == '**':\n            result **= num\n        else:\n            raise ValueError(\"Invalid operator\")\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    return \"\".join([c.upper() if c.isalpha() and c.islower() else c.lower() if c.isalpha() and c.isupper() else c for c in s])"}
{"task_id": "HumanEval/162", "completion": "def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    scount = Counter(nums)\n    arr = sorted([scount[num] for num in sorted(scount.keys())], key=lambda x: -x)    \n    \n    return (arr[0] - sum(arr[1:])) if arr[0] > sum(arr[1:]) else sum(arr) % 2"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return list(range(a, b+1, 2))"}
