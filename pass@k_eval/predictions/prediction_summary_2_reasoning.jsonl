{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i, n1 in enumerate(numbers):\n        for n2 in numbers[i+1:]:\n            if abs(n1 - n2) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(s):\n    open_brace = 0\n    start_index = 0\n    result = []\n    for i, c in enumerate(s):\n        if c == '(':\n            if open_brace == 0:\n                start_index = i\n            open_brace += 1\n        elif c == ')':\n            open_brace -= 1\n            if open_brace == 0:\n                result.append(s[start_index:i+1])\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number % 1"}
{"task_id": "HumanEval/3", "completion": "def below_zero(ops: List[int]) -> bool:\n    return any(balance < 0 for balance in accumulate(ops))"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(nums: List[float]) -> float:\n    mean = sum(nums) / len(nums)\n    return sum(abs(x - mean) for x in nums) / len(nums)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(nums: list, delim: int) -> list:\n    return [x for pair in zip(nums[::2], nums[1::2]) for x in pair] + nums[-1:]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_parens(s: str) -> int:\n        level = 0\n        max_level = 0\n        for c in s:\n            if c == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif c == ')':\n                level -= 1\n        return max_level\n\n    return [parse_parens(s) for s in paren_string.split()]"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings, substring):\n    return list(filter(lambda s: substring in s, strings))"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    return sum(numbers), prod(numbers) if numbers else (0, 1)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n    \"\"\"\n    max_value = 0\n    result = []\n    for num in numbers:\n        if num > max_value:\n            max_value = num\n        result.append(max_value)\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef make_palindrome(s):\n    if not s or len(s) == 1:\n        return s\n    postfix_start = next((i for i in range(len(s) - 1, 0, -1) if is_palindrome(s[i:])), 0)\n    return s + s[postfix_start:len(s) - 1][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "def longest(strings):\n    return max(strings, key=len) if strings else None"}
{"task_id": "HumanEval/13", "completion": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return a list of all prefixes of the input string, from shortest to longest.\n\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, range(n+1)))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_chars(s):\n    return len({*s.lower()})"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n    \"\"\"\n    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string, substring):\n    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    number_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    number_list = numbers.split()\n    return \" \".join(sorted(number_list, key=lambda x: number_map[x]))"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers):\n    closest_pair = (numbers[0], numbers[1])\n    smallest_diff = abs(closest_pair[0] - closest_pair[1])\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            pair = (numbers[i], numbers[j])\n            diff = abs(pair[0] - pair[1])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                closest_pair = pair\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers):\n    \"\"\"\n    Given a list of numbers, apply a linear transform to the list\n    such that the smallest number will become 0 and the largest will become 1.\n    \"\"\"\n    low = min(numbers)\n    high = max(numbers)\n    return [(x - low) / (high - low) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(my_list):\n    return list(filter(lambda x: isinstance(x, int), my_list))"}
{"task_id": "HumanEval/23", "completion": "def strlen(s):\n    return len(s)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n):\n    return next(i for i in range(n, 0, -1) if n % i == 0)"}
{"task_id": "HumanEval/25", "completion": "def factorize(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(my_list):\n    return list(dict.fromkeys(my_list))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(s):\n    return s.swapcase()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings):\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(my_list, prefix):\n    return list(filter(lambda x: x.startswith(prefix), my_list))"}
{"task_id": "HumanEval/30", "completion": "def get_positive(my_list):\n    return list(filter(lambda x: x > 0, my_list))"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    return False if n <= 1 else not any(n % i == 0 for i in range(2, int(n ** 0.5) + 1))"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    \"\"\"\n    Finds a zero of the polynomial defined by the given coefficients xs.\n    The function returns only one zero, even if multiple zeros exist.\n    The function only takes lists xs with an even number of coefficients and the largest non-zero coefficient, which guarantees a solution.\n    \"\"\"\n    # Implement the find_zero function here\n    return 0"}
{"task_id": "HumanEval/33", "completion": "def sort_third(my_list):\n    return [sorted(val) if i % 3 == 0 else val for i, val in enumerate(my_list)]"}
{"task_id": "HumanEval/34", "completion": "def unique(my_list):\n    return list(set(my_list))"}
{"task_id": "HumanEval/35", "completion": "def max_element(my_list):\n    return max(my_list)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(my_list):\n    return [x for x in sorted(my_list[1::2]) if x % 2 == 0] + [x for x in my_list if x % 2 != 0]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    fib_seq = {1, 2}\n    curr_fib = 1\n    next_fib = 1\n    for _ in range(n):\n        if curr_fib not in fib_seq:\n            fib_seq.add(curr_fib)\n        curr_fib, next_fib = next_fib, curr_fib + next_fib\n    return list(fib_seq)[n - 1]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(my_list):\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)):\n            for k in range(j+1, len(my_list)):\n                if my_list[i] + my_list[j] + my_list[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other"}
{"task_id": "HumanEval/42", "completion": "def incr_list(my_list):\n    return list(map(lambda x: x + 1, my_list))"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(my_list):\n    return any(my_list[i] + my_list[j] == 0 for i in range(len(my_list)) for j in range(i+1, len(my_list)))"}
{"task_id": "HumanEval/44", "completion": "def change_base(x, base):\n    return bin(x)[2:].zfill(base)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return a * h / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    if n <= 3:\n        return 0\n    elif n == 4:\n        return 2\n    \n    # Initialize the first four elements of the sequence\n    a, b, c, d = 0, 0, 2, 0\n    \n    for i in range(5, n+1):\n        # Compute the next element in the sequence using the previous four elements\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l = sorted(l)\n    if len(sorted_l) % 2 == 0:\n        return (sorted_l[len(sorted_l) // 2 - 1] + sorted_l[len(sorted_l) // 2]) / 2\n    else:\n        return sorted_l[len(sorted_l) // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n, p):\n    return 2 ** n % p"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = set('aeiou')\n    return ''.join([c for c in text if c.lower() not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(my_list, threshold):\n    return all(x < threshold for x in my_list)"}
{"task_id": "HumanEval/53", "completion": "def add(x, y):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(w1, w2):\n    return sorted(w1) == sorted(w2)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a+b\n    return a"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Returns True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(my_list):\n    if len(my_list) <= 1:\n        return True\n    return all(my_list[i] >= my_list[i-1] for i in range(1, len(my_list))) or all(my_list[i] <= my_list[i-1] for i in range(1, len(my_list)))"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    if n <= 1:\n        return n\n    for i in range(int(n**0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) >> 1"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Returns True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    if len(xs) == 1:\n        return [0]\n    else:\n        return [x * xs[i] for i, x in enumerate(xs)]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n <= 2:\n        return 0\n    else:\n        return sum([fibfib(i) for i in range(n-1, n-4, -1)])"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(word):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return sum(c.lower() in vowels for c in word)"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digit_sum(s):\n    return sum(map(ord, filter(str.isupper, s)))"}
{"task_id": "HumanEval/67", "completion": "def fruit_dist(s, n):\n    a, o = map(int, s.split())\n    return n - a - o"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n    even_values = {x for x in arr if x % 2 == 0}\n    if not even_values:\n        return []\n    smallest_even_value = min(even_values)\n    smallest_even_index = arr.index(smallest_even_value)\n    return [smallest_even_value, smallest_even_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    # create a dictionary to store the count of each integer\n    freq = {num: lst.count(num) for num in set(lst)}\n\n    # find the maximum integer that satisfies the condition\n    max_int = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num and num > max_int:\n            max_int = num\n\n    return max_int"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(my_list):\n    return [x for x in my_list if x % 2 == 0] + [x for x in my_list if x % 2 != 0]"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        area = (a * b * c) / 2\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    mid = len(arr) // 2\n    changes = 0\n    for i in range(mid):\n        if arr[i] != arr[len-i-1]:\n            changes += 1\n            arr[i] = arr[len-i-1]\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(list1, list2):\n    total_chars1 = sum(map(len, list1))\n    total_chars2 = sum(map(len, list2))\n    return list1 if total_chars1 < total_chars2 else list2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 1:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0 and is_prime(i) and is_prime(a//i):\n            return True\n    return False\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n ** (x // n)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a**(1/3).is_integer()"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_digits = {2, 3, 5, 7, 11, 13, 17, 19}\n    num = num.upper()\n    count = sum(int(char, 16) in prime_digits for char in num if char in 'ABCDEF')\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    return len(s) < 3 or any(s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2] for i in range(len(s) - 2))"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return ['A+'*((grade-95)>=0)+'A'*((grade-90)>=0)+'A-'*((grade-87)>=0)+'B+'*((grade-83)>=0)+'B'*((grade-80)>=0)+'B-'*((grade-77)>=0)+'C+'*((grade-73)>=0)+'C'*((grade-70)>=0)+'C-'*((grade-67)>=0)+'D+'*((grade-63)>=0)+'D'*((grade-60)>=0)+'D-'*((grade-57)>=0)+'E'*((grade-50)>=0) for grade in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(s):\n    return len(s) in {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    return len([i for i in range(10**(n-1), 10**n) if str(i)[0] == '1' or str(i)[-1] == '1'])"}
{"task_id": "HumanEval/84", "completion": "def solve(n):\n    return ''.join(str(int(i) + 1) for i in bin(n)[2:])"}
{"task_id": "HumanEval/85", "completion": "def add(my_list):\n    return sum(x for i, x in enumerate(my_list) if i % 2 and not x % 2)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return \" \".join(sorted(s, key=lambda x: \"\".join(sorted(x))))"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return sorted([(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x], key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(arr):\n    return sorted(arr, reverse=sum(arr[0], arr[-1]) % 2 == 0)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    table = str.maketrans(alphabet, new_alphabet)\n    return s.translate(table)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(my_list):\n    if len(my_list) < 2:\n        return None\n    return min([x for x in my_list if x != sorted(my_list)[0]], default=None)"}
{"task_id": "HumanEval/91", "completion": "def is_bored(string):\n    return sum(1 for s in string.split('.')[:-1] if s.startswith('I'))"}
{"task_id": "HumanEval/92", "completion": "def any_int(a, b, c):\n    return any(a == b + c or b == a + c or c == a + b)"}
{"task_id": "HumanEval/93", "completion": "def encode(msg):\n    vwls = 'aeiou'\n    enc = ''\n    for c in msg:\n        if c.isalpha():\n            enc += c.lower() if c.isupper() else c.upper()\n        else:\n            enc += c\n    \n    for i, c in enumerate(enc):\n        if c in vwls:\n            enc = enc[:i] + chr(ord(c) + 2) + enc[i+1:]\n    \n    return enc"}
{"task_id": "HumanEval/94", "completion": "def get_largest_prime_sum(my_list):\n    largest_prime = max([x for x in my_list if is_prime(x)], default=0, key=lambda x: int(x))\n    return sum(map(int, str(largest_prime)))\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    return bool(d) and all(k.islower() or k.isupper() for k in d)"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    prime_numbers = []\n    for i in range(2, n+1):\n        if all(i % j != 0 for j in range(2, int(i**0.5) + 1)):\n            prime_numbers.append(i)\n    return prime_numbers"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return int(str(a)[-1]) * int(str(b)[-1])"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(c.isupper() for i, c in enumerate(s) if i % 2 == 0)"}
{"task_id": "HumanEval/99", "completion": "def closest_int(v):\n    return round(float(v))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    return [n, *([n //= 2 if n % 2 == 0 else (n + 1) // 2 for _ in range(n - 1)])][::-1]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # find the biggest even number in the range [x, y] inclusive\n    return next((i for i in range(y, x-1, -1) if i % 2 == 0), -1)"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    average = int(sum / (m-n+1))\n    binary_string = bin(average)[2:]\n    return \"0b\" + binary_string"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    arr.sort(key=len)\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            result.append(sum)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n    return (even_count, odd_count)\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return len([num for num in arr if sum(map(int, str(num))) > 0])"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr: return True\n    arr.sort()\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Check if all elements in lst1 are even\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    # Check if there are any even numbers in lst2\n    elif any(x % 2 == 0 for x in lst2):\n        return \"NO\"\n    # Check if it is possible to exchange elements between lst1 and lst2 to make all elements of lst1 even\n    else:\n        # Sort both lists\n        lst1.sort()\n        lst2.sort()\n        # Initialize variables to keep track of the current index in both lists\n        i = 0\n        j = 0\n        # Loop through both lists and check if it is possible to exchange elements to make all elements of lst1 even\n        while i < len(lst1) and j < len(lst2):\n            if lst1[i] % 2 == 0 and lst2[j] % 2 != 0:\n                # If the current element in lst1 is even and the current element in lst2 is odd, exchange elements\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                i += 1\n                j += 1\n            elif lst1["}
{"task_id": "HumanEval/111", "completion": "def histogram(s):\n    return {l: s.count(l) for l in set(s)}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    return (\"\".join(char for char in s if char not in c), \"\".join(char for char in s if char not in c) == \"\".join(char for char in s if char not in c)[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(my_list):\n    return [\"the number of odd elements {} in the string {} of the input.\".format(len([x for x in s if int(x) % 2 == 1]), i) for i, s in enumerate(my_list)]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        sub_array_sum = sum(nums[i:])\n        min_sum = min(min_sum, sub_array_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(g, c):\n    r, w, b = len(g), 0, 0\n    for i in range(r):\n        for j in g[i]:\n            if j == 1:\n                w += 1\n                if w == c:\n                    b += 1\n                    w = 0\n    return b + bool(w)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    return [word for word in s.split() if len(word) == n]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    count = 0\n    for char in lst:\n        count += 1 if char == '(' else -1 if char == ')' and count > 0 else 0\n        if count < 0: return 'No'\n    return 'Yes' if count == 0 else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(my_list):\n    return sum(x for i, x in enumerate(my_list) if not i % 2 and x % 2)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    arr.sort()\n    sum = 0\n    for i in range(k):\n        digit = arr[i] // 10\n        if digit <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n <= 0:\n        raise ValueError(\"n should be a positive integer.\")\n    return sorted([x for x in [1, 3 * n + 1][n % 2] if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid, otherwise False.\n\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n    if not date:\n        return False\n    match = re.match(r'^(\\d{2})-(\\d{2})-(\\d{4})$', date)\n    if not match:\n        return False\n    month, day, year = map(int, match.groups())\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 3"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        result = 0\n        for char in txt:\n            if ord(char) % 2 == 1:\n                result += 1\n        return result"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(my_list):\n    return all(my_list[i] <= my_list[i+1] for i in range(len(my_list)-1))"}
{"task_id": "HumanEval/127", "completion": "def intersection(i1, i2):\n    s, e = max(i1[0], i2[0]), min(i1[1], i2[1])\n    if s > e: return \"NO\"\n    l = e - s + 1\n    if l > 1 and all(l % i for i in range(2, int(l ** 0.5) + 1)): return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    return sum(num * (-1) ** (num < 0) for num in arr)"}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef min_path(grid, k):\n    heap = [(grid[0][0], 0, 0)]\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n\n    while len(heap) > 0:\n        value, row, col = heapq.heappop(heap)\n        if not visited[row][col] and len(result) < k:\n            result.append(value)\n            visited[row][col] = True\n            for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n                if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and not visited[r][c]:\n                    heapq.heappush(heap, (grid[r][c], r, c))\n\n    return result\n\ndef main():\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 3\n    print(min_path(grid, k))\n\nif __name__ == \"__main__"}
{"task_id": "HumanEval/130", "completion": "def tribonacci_sequence(n):\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        seq = [1, 3]\n        for i in range(2, n):\n            seq.append(seq[i-1] + seq[i-2] + seq[i+1])\n        return seq"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    return {n: n % 10 for n in range(1, int(input())) if n % 2 == 1}.get(n, 0)"}
{"task_id": "HumanEval/132", "completion": "def is_nested(s):\n    st = []\n    for c in s:\n        if c == '[':\n            st.append(c)\n        elif c == ']':\n            if not st:\n                return False\n            st.pop()\n    return bool(st)"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(my_list):\n    return sum(map(lambda x: int(x)**2, my_list))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyz\""}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    return (max(filter(lambda x: x < 0, lst), default=None), min(filter(lambda x: x > 0, lst), default=None))"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    try:\n        a = float(a.replace(\",\", \".\"))\n    except ValueError:\n        pass\n    try:\n        b = float(b.replace(\",\", \".\"))\n    except ValueError:\n        pass\n    return a if a > b else b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and any(n == i + j + k + l for i in range(2, int(n**0.5) + 1, 2) for j in range(2, int(n**0.5) + 1, 2) for k in range(2, int(n**0.5) + 1, 2) for l in range(2, int(n**0.5) + 1, 2))"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    return 1 if n == 1 else n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return \" \".join([word.replace(\" \", \"_\") for word in text.split()])"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    if len(file_name.split('.')[0]) == 0:\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x * x\n        elif i % 4 == 0:\n            result += x * x * x\n        else:\n            result += x\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    prime_words = [word for word in sentence.split() if is_prime(len(word))]\n    return \" \".join(prime_words)\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x, n = map(lambda t: int(t[0]) * int(t[1]), map(str.split, (x, n)))\n    return (x * n) % (x * n) == 0"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))"}
{"task_id": "HumanEval/146", "completion": "def special_filter(nums):\n    return sum(num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 100 in [1, 3, 5, 7, 9] for num in nums)"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = sum(a[i] + a[j] + a[k] % 3 == 0 for i in range(len(a)) for j in range(i + 1, len(a)) for k in range(j + 1, len(a)))\n    return count\n\nn = 5\nprint(get_max_triples(n))"}
{"task_id": "HumanEval/148", "completion": "def between_planets(p1, p2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    i1 = planets.index(p1)\n    i2 = planets.index(p2)\n    return tuple(planets[i1+1:i2])\n\ndef test_between_planets():\n    assert between_planets(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")\n    assert between_planets(\"Earth\", \"Mercury\") == (\"Venus\")\n    assert between_planets(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def list_sort(my_list):\n    return sorted(my_list, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    return x if is_prime(n) else y\n\ndef is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum([num ** 2 for num in lst if num % 2 != 0 and num > 0 and num == int(num)])"}
{"task_id": "HumanEval/152", "completion": "def compare(s, g):\n    return [abs(a-b) for a, b in zip(s, g)]"}
{"task_id": "HumanEval/153", "completion": "def strongest_extension(class_name, extensions):\n    max_strength = None\n    strongest_extension = None\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if max_strength is None or strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(w1, w2):\n    return any(w2 in w1[i:] for i in range(len(w1)))"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(n):\n    even, odd = 0, 0\n    while n:\n        even += n % 2 == 0\n        odd += n % 2 != 0\n        n //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(n):\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    roman = ''\n    for i, v in enumerate(values):\n        while n >= v:\n            roman += numerals[i]\n            n -= v\n    return roman"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return any(x**2 + y**2 == z**2 for x, y, z in [(a, b, c), (b, c, a), (c, a, b)])"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    if not words:\n        return None\n    return max(words, key=lambda x: (len(set(x)), x))"}
{"task_id": "HumanEval/159", "completion": "def eat(num, need, rem):\n    total = num + need\n    return [min(total, rem), rem - min(total, rem)]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for op, o in zip(operator, operand[1:]):\n        if op == '+':\n            result += o\n        elif op == '-':\n            result -= o\n        elif op == '*':\n            result *= o\n        elif op == '//':\n            result //= o\n        elif op == '**':\n            result **= o\n        else:\n            raise ValueError(\"Invalid operator\")\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    res = \"\".join([c.upper() if c.islower() else c.lower() for c in s if c.isalpha()]) or s[::-1]\n    return res"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]"}
